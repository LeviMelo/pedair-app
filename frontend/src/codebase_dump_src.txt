Project structure for '/c/Users/Galaxy/LEVI/projects/apps/pedair-app/frontend/src':
===============================================================================
  App.css
  App.tsx
  assets/react.svg
  components/forms/DynamicFormRenderer.tsx
  components/forms/FormBuilderToolbar.tsx
  components/forms/FormMetadataEditor.tsx
  components/forms/SchemaEditor.tsx
  components/layout/Layout.tsx
  components/ui/AutocompleteInput.tsx
  components/ui/Button.tsx
  components/ui/CheckboxGroupField.tsx
  components/ui/DashboardGreetingCard.tsx
  components/ui/DrugInputField.tsx
  components/ui/InputField.tsx
  components/ui/PageHeader.tsx
  components/ui/QuickSelectButtons.tsx
  components/ui/RadioButtonGroupField.tsx
  components/ui/SectionCard.tsx
  components/ui/SelectedItemTags.tsx
  components/ui/SelectField.tsx
  components/ui/StepperInput.tsx
  components/ui/TextareaField.tsx
  components/widgets/AutocompleteTagSelectorWidget.tsx
  components/widgets/DrugSectionWidget.tsx
  data/intraoperatoriaOptions.ts
  data/preAnestesiaOptions.ts
  index.css
  main.tsx
  pages/CreateProjectPage.tsx
  pages/DashboardPage.tsx
  pages/DataSubmissionPage.tsx
  pages/FormBuilderPage.tsx
  pages/NotFoundPage.tsx
  pages/NotificationSchedulerPage.tsx
  pages/PatientSearchPage.tsx
  pages/ProjectDetailsPage.tsx
  pages/RoleEditorPage.tsx
  pages/SettingsPage.tsx
  pages/TestIntraoperatoriaFormPage.tsx
  pages/TestPreAnestesiaFormPage.tsx
  pages/TestRecuperacaoFormPage.tsx
  schemas/intraoperatoria.schema.json
  schemas/intraoperatoria.uiSchema.json
  schemas/preAnestesia.schema.json
  schemas/preAnestesia.uiSchema.json
  schemas/recuperacaoPosAnestesica.schema.json
  schemas/recuperacaoPosAnestesica.uiSchema.json
  stores/authStore.ts
  stores/projectStore.ts
  stores/submissionStore.ts
  vite-env.d.ts



###############################################################################
### FILE: App.tsx
###############################################################################
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import Layout from './components/layout/Layout';
import DashboardPage from './pages/DashboardPage';
import FormBuilderPage from './pages/FormBuilderPage';
import RoleEditorPage from './pages/RoleEditorPage';
import DataSubmissionPage from './pages/DataSubmissionPage';
import PatientSearchPage from './pages/PatientSearchPage';
import NotificationSchedulerPage from './pages/NotificationSchedulerPage';
import SettingsPage from './pages/SettingsPage';
import NotFoundPage from './pages/NotFoundPage';

// Import the actual ProjectDetailsPage
import ProjectDetailsPage from './pages/ProjectDetailsPage'; 
import CreateProjectPage from './pages/CreateProjectPage';

// Test pages (can be kept for development or removed later)
import TestRecuperacaoFormPage from './pages/TestRecuperacaoFormPage';
import TestPreAnestesiaFormPage from './pages/TestPreAnestesiaFormPage';
import TestIntraoperatoriaFormPage from './pages/TestIntraoperatoriaFormPage';

// Placeholder for ProjectDetailsPage - User will create this file manually
// import ProjectDetailsPage from './pages/ProjectDetailsPage'; 

import './index.css'; // Ensure global styles are loaded

function App() {
  return (
    <Routes>
      <Route path="/" element={<Layout />}>
        <Route index element={<DashboardPage />} />
        <Route path="dashboard/create-project" element={<CreateProjectPage />} />
        
        {/* Project-specific routes */}
        <Route path="project/:projectId">
          <Route index element={<ProjectDetailsPage />} />
          <Route path="submission" element={<DataSubmissionPage />} />
          <Route path="builder" element={<FormBuilderPage />} />
          <Route path="roles" element={<RoleEditorPage />} />
          <Route path="search" element={<PatientSearchPage />} />
          <Route path="notifications" element={<NotificationSchedulerPage />} />
        </Route>
        
        <Route path="settings" element={<SettingsPage />} />
        
        {/* Routes for existing test form pages - can be integrated or kept separate */}
        <Route path="test/recuperacao" element={<TestRecuperacaoFormPage />} />
        <Route path="test/preanestesia" element={<TestPreAnestesiaFormPage />} />
        <Route path="test/intraoperatoria" element={<TestIntraoperatoriaFormPage />} />

        {/* Catch-all for 404 Not Found pages */}
        <Route path="*" element={<NotFoundPage />} />
      </Route>
    </Routes>
  );
}

export default App;


###############################################################################
### FILE: assets/react.svg
###############################################################################
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>


###############################################################################
### FILE: components/forms/DynamicFormRenderer.tsx
###############################################################################
import React from 'react';
import RadioButtonGroupField from '../ui/RadioButtonGroupField';
import CheckboxGroupField from '../ui/CheckboxGroupField';
import InputField from '../ui/InputField';
import SelectField from '../ui/SelectField';
import AutocompleteTagSelectorWidget, { SelectedItemType } from '../widgets/AutocompleteTagSelectorWidget';
import DrugSectionWidget, { DrugSectionValue } from '../widgets/DrugSectionWidget';
// Import the data source for IntraOp options
import { intraOpDataSources, OptionInfo as IntraOpOptionInfo } from '../../data/intraoperatoriaOptions';
// We will import schema types and UI components later

// Define expected prop types (will expand later)
interface DynamicFormRendererProps {
  schema: any; // Replace 'any' with a proper JSON Schema type definition later
  uiSchema: any; // Replace 'any' with a proper UI Schema type definition later
  formData: any;
  onFormDataChange: (updatedData: any) => void;
  // We can add a widget registry prop later if we go that route
  // widgets?: { [widgetName: string]: React.ComponentType<any> };
}

// Helper type for widget options
interface WidgetOption {
  value: string | number;
  label: string;
}

interface CheckboxWidgetOption {
  value: string;
  label: string;
}

const DynamicFormRenderer: React.FC<DynamicFormRendererProps> = ({
  schema,
  uiSchema,
  formData,
  onFormDataChange,
}) => {
  if (!schema || !schema.properties) {
    return <p className="text-red-500 dark:text-red-400">Schema not provided or is invalid.</p>;
  }

  const renderField = (propertyName: string, propertySchema: any) => {
    const widgetName = uiSchema[propertyName]?.['ui:widget'];
    const fieldTitle = propertySchema.title || propertyName;
    const fieldUiOptions = uiSchema[propertyName]?.['ui:options'] || {};
    const isRequired = schema.required?.includes(propertyName) || fieldUiOptions.required || false;

    const baseProps = {
      id: propertyName,
      label: fieldTitle,
      required: isRequired,
    };

    if (widgetName === 'DrugSectionWidget') {
      const currentDrugSectionValue = formData[propertyName] || { selectedDrugs: {}, drugValues: {} };
      return (
        <DrugSectionWidget
          id={propertyName}
          value={currentDrugSectionValue as DrugSectionValue}
          onChange={(newValue: DrugSectionValue) =>
            onFormDataChange({ ...formData, [propertyName]: newValue })
          }
          uiOptions={fieldUiOptions}
          required={isRequired}
        />
      );
    }

    if (widgetName === 'AutocompleteTagSelectorWidget') {
      return (
        <AutocompleteTagSelectorWidget
          {...baseProps}
          value={formData[propertyName] as SelectedItemType[] || []}
          onChange={(newValue: SelectedItemType[]) => 
            onFormDataChange({ ...formData, [propertyName]: newValue })
          }
          uiOptions={fieldUiOptions}
        />
      );
    }

    if (widgetName === 'InputFieldWidget') {
      const inputType = fieldUiOptions.inputType || 'text';
      return (
        <InputField
          {...baseProps}
          type={inputType as 'text' | 'number' | 'email' | 'password' | 'date'}
          placeholder={fieldUiOptions.placeholder || ''}
          value={formData[propertyName] || ''}
          onChange={(event) => {
            let newValue: string | number = event.target.value;
            if (inputType === 'number') {
              newValue = event.target.value === '' ? '' : parseFloat(event.target.value);
              if (isNaN(newValue as number) && event.target.value !== '') newValue = formData[propertyName];
            }
            onFormDataChange({ ...formData, [propertyName]: newValue });
          }}
        />
      );
    }

    if (widgetName === 'SelectFieldWidget') {
      let selectOptions: WidgetOption[] = [];
      if (fieldUiOptions.optionsSourceKey && intraOpDataSources[fieldUiOptions.optionsSourceKey as keyof typeof intraOpDataSources]) {
        selectOptions = (intraOpDataSources[fieldUiOptions.optionsSourceKey as keyof typeof intraOpDataSources] as IntraOpOptionInfo[]).map(opt => ({...opt}));
      } else if (propertySchema.enum && propertySchema.enumNames) {
        selectOptions = propertySchema.enum.map((enumValue: string | number, index: number) => ({
          value: enumValue,
          label: propertySchema.enumNames[index] || String(enumValue),
        }));
      }
      return (
        <SelectField
          {...baseProps}
          options={selectOptions}
          value={formData[propertyName] || ''}
          onChange={(event) => onFormDataChange({ ...formData, [propertyName]: event.target.value })}
          placeholder={fieldUiOptions.placeholder}
        />
      );
    }

    if (widgetName === 'RadioButtonGroupField') {
      let radioOptions: WidgetOption[] | undefined = undefined;
      if (fieldUiOptions.optionsSourceKey && intraOpDataSources[fieldUiOptions.optionsSourceKey as keyof typeof intraOpDataSources]) {
        radioOptions = (intraOpDataSources[fieldUiOptions.optionsSourceKey as keyof typeof intraOpDataSources] as IntraOpOptionInfo[]).map(opt => ({...opt}));
      } else if (propertySchema.enum && propertySchema.enumNames) {
        radioOptions = propertySchema.enum.map((enumValue: string | number, index: number) => ({
          value: enumValue,
          label: propertySchema.enumNames[index] || String(enumValue),
        }));
      }
      if (radioOptions) {
        return (
          <RadioButtonGroupField
            idPrefix={propertyName}
            label={fieldTitle}
            required={isRequired}
            options={radioOptions}
            selectedValue={formData[propertyName] || null}
            onChange={(value) => onFormDataChange({ ...formData, [propertyName]: value })}
          />
        );
      }
    }

    if (widgetName === 'CheckboxGroupField') {
      let checkboxOptions: CheckboxWidgetOption[] | undefined = undefined;
      if (fieldUiOptions.optionsSourceKey && intraOpDataSources[fieldUiOptions.optionsSourceKey as keyof typeof intraOpDataSources]) {
        checkboxOptions = (intraOpDataSources[fieldUiOptions.optionsSourceKey as keyof typeof intraOpDataSources] as IntraOpOptionInfo[]).map(opt => ({ value: String(opt.value), label: opt.label }));
      } else if (propertySchema.items?.enum && propertySchema.items?.enumNames) {
        checkboxOptions = propertySchema.items.enum.map((enumValue: any, index: number) => ({
          value: String(enumValue),
          label: propertySchema.items.enumNames[index] || String(enumValue),
        }));
      }
      if (checkboxOptions) {
        return (
          <CheckboxGroupField
            idPrefix={propertyName}
            label={fieldTitle}
            options={checkboxOptions}
            selectedValues={formData[propertyName] || []}
            onChange={(toggledValue) => {
              const currentArray = formData[propertyName] || [];
              const newArray = currentArray.includes(toggledValue)
                ? currentArray.filter((item: string) => item !== toggledValue)
                : [...currentArray, toggledValue];
              onFormDataChange({ ...formData, [propertyName]: newArray });
            }}
          />
        );
      }
    }

    // Fallback for unhandled widget types
    return (
      <div className="mb-4 p-2 border border-dashed border-slate-300 dark:border-slate-600 text-sm text-slate-600 dark:text-slate-300 rounded-md">
        <p><strong>Field:</strong> {fieldTitle} (<code>{propertyName}</code>)</p>
        <p><strong>Widget:</strong> {widgetName || 'Default (Unhandled)'}</p>
        <p><strong>Schema Type:</strong> {propertySchema.type}</p>
        <p><strong>Current Value:</strong> {JSON.stringify(formData[propertyName])}</p>
      </div>
    );
  };

  const sectionKeys = Object.keys(schema.properties);

  return (
    <form className="space-y-6">
      {/* Overall Form Title and Description - always show */}
      {schema.title && (
        <h2 className="card-title mb-2">
          {schema.title}
        </h2>
      )}
      {schema.description && (
        <p className="form-description">
          {schema.description}
        </p>
      )}

      {/* Always render all fields */}
      {sectionKeys.map((propertyName) => {
        const propertySchema = schema.properties[propertyName];
        if (!propertySchema) {
          console.warn(`DynamicFormRenderer: Schema definition missing for property: ${propertyName}`);
          return <p key={propertyName} className="text-red-500 dark:text-red-400">Error: Missing schema for {propertyName}</p>;
        }
        return <div key={propertyName}>{renderField(propertyName, propertySchema)}</div>;
      })}
      {/* We might add a submit button or other form-level actions here later */}
    </form>
  );
};

export default DynamicFormRenderer; 


###############################################################################
### FILE: components/forms/FormBuilderToolbar.tsx
###############################################################################
import React from 'react';

interface FormBuilderToolbarProps {
  onNewForm: () => void;
  onLoadForm: () => void; // Placeholder
  onSaveForm: () => void; // Placeholder
}

const FormBuilderToolbar: React.FC<FormBuilderToolbarProps> = ({ onNewForm, onLoadForm, onSaveForm }) => {
  return (
    <div className="bg-gradient-to-r from-slate-100 via-slate-50 to-slate-100 dark:from-slate-700 dark:via-slate-700 dark:to-slate-700 p-3 rounded-xl shadow-lg mb-4 flex items-center space-x-2 print:hidden border border-slate-200/50 dark:border-slate-600/50">
      <button 
        onClick={onNewForm}
        className="px-3 py-1.5 text-sm bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 dark:from-blue-600 dark:to-blue-700 dark:hover:from-blue-500 dark:hover:to-blue-600 text-white font-semibold rounded-lg shadow-lg shadow-blue-500/25 transition-all duration-150 hover:scale-105"
      >
        New Blank Form
      </button>
      <button 
        onClick={onLoadForm}
        className="px-3 py-1.5 text-sm bg-slate-500 hover:bg-slate-600 dark:bg-slate-600 dark:hover:bg-slate-700 text-white font-semibold rounded-md shadow-sm transition-colors duration-150"
      >
        Load Form (Placeholder)
      </button>
      <button 
        onClick={onSaveForm}
        className="px-3 py-1.5 text-sm bg-green-500 hover:bg-green-600 dark:bg-green-600 dark:hover:bg-green-700 text-white font-semibold rounded-md shadow-sm transition-colors duration-150"
      >
        Save Form (Placeholder)
      </button>
      {/* Add more controls like form settings, preview later */}
    </div>
  );
};

export default FormBuilderToolbar; 


###############################################################################
### FILE: components/forms/FormMetadataEditor.tsx
###############################################################################
import React from 'react';
import InputField from '../ui/InputField'; // Assuming InputField can be reused

interface FormMetadataEditorProps {
  title: string;
  onTitleChange: (newTitle: string) => void;
  description: string;
  onDescriptionChange: (newDescription: string) => void;
  version: string; // For display, can be made editable later
  // onVersionChange: (newVersion: string) => void; // If version becomes editable
}

const FormMetadataEditor: React.FC<FormMetadataEditorProps> = ({
  title,
  onTitleChange,
  description,
  onDescriptionChange,
  version,
}) => {
  return (
    <div className="bg-slate-100 dark:bg-slate-700 p-4 rounded-md shadow mb-4">
      <h3 className="text-lg font-semibold text-slate-800 dark:text-slate-100 mb-3 border-b border-slate-300 dark:border-slate-600 pb-2">Form Metadata</h3>
      <div className="space-y-3">
        <InputField
          id="formBuilderTitle"
          label="Form Title"
          type="text"
          value={title}
          onChange={(e) => onTitleChange(e.target.value)}
          className="mb-0" // Remove default bottom margin from InputField container
        />
        <div>
          <label htmlFor="formBuilderDescription" className="block text-sm font-medium text-slate-700 dark:text-slate-200 mb-1">
            Form Description
          </label>
          <textarea
            id="formBuilderDescription"
            value={description}
            onChange={(e) => onDescriptionChange(e.target.value)}
            rows={3}
            className="mt-1 block w-full px-3 py-2 border rounded-md text-sm shadow-sm 
                       bg-white dark:bg-slate-800/50 
                       border-slate-300 dark:border-slate-600 
                       text-slate-900 dark:text-slate-100 
                       placeholder-slate-400 dark:placeholder-slate-500 
                       focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 
                       dark:focus:border-blue-500 dark:focus:ring-blue-500"
            placeholder="Enter a brief description of the form..."
          />
        </div>
        <InputField
          id="formBuilderVersion"
          label="Form Version (Read-only)"
          type="text"
          value={version}
          onChange={() => {}} // No-op for read-only display, or make it controlled if editable
          className="mb-0"
          inputClassName="bg-slate-200 dark:bg-slate-600 cursor-not-allowed" // Style as read-only
          // disabled // Or use disabled prop if InputField supports it well for styling
        />
      </div>
    </div>
  );
};

export default FormMetadataEditor; 


###############################################################################
### FILE: components/forms/SchemaEditor.tsx
###############################################################################
import React from 'react';

interface SchemaEditorProps {
  id: string;
  title: string;
  jsonString: string;
  onJsonStringChange: (newJsonString: string) => void;
  error: string | null;
  height?: string; // e.g., '300px' or '50vh'
  textareaClassName?: string; // Allow passing additional classes to textarea
}

const SchemaEditor: React.FC<SchemaEditorProps> = ({
  id,
  title,
  jsonString,
  onJsonStringChange,
  error,
  height = '400px',
  textareaClassName = '',
}) => {

  const finalTextAreaClassName = [
    'textarea-base',
    'w-full', // Keep existing layout/sizing classes
    'flex-grow',
    'font-mono', // Keep specific font style
    'shadow-inner', // Keep specific shadow style
    error ? 'border-red-500 dark:border-red-400 focus:border-red-500 dark:focus:border-red-400 focus:ring-red-500 dark:focus:ring-red-400' : '',
    textareaClassName, // Allow external override/extension
  ].filter(Boolean).join(' ');

  return (
    <div className="bg-white dark:bg-slate-800 p-4 rounded-md shadow flex flex-col h-full">
      <h3 className="text-lg font-semibold text-slate-800 dark:text-slate-100 mb-2">{title}</h3>
      <textarea
        id={id}
        value={jsonString}
        onChange={(e) => onJsonStringChange(e.target.value)}
        className={finalTextAreaClassName}
        placeholder='Enter JSON schema here...'
        spellCheck="false"
        style={{ height: height }}
      />
      {error && (
        <p className="mt-1.5 text-xs text-red-600 dark:text-red-400 bg-red-100 dark:bg-red-900/30 p-2 rounded-md">
          <strong className="font-semibold">Parsing Error:</strong> {error}
        </p>
      )}
    </div>
  );
};

export default SchemaEditor; 


###############################################################################
### FILE: components/layout/Layout.tsx
###############################################################################
import React, { useState, useEffect, useRef } from 'react';
import { Link, Outlet, useLocation, useNavigate } from 'react-router-dom';
import {
  PiGaugeDuotone,
  PiListChecksDuotone,
  PiSquaresFourDuotone,
  PiUsersDuotone,
  PiMagnifyingGlassDuotone,
  PiBellDuotone,
  PiGearDuotone,
  PiList as PiMenuIcon,
  PiCaretLeftDuotone,
  PiCaretDownDuotone,
  PiCaretRightDuotone,
  PiSunDuotone,
  PiMoonDuotone,
  PiSignOutDuotone,
  PiHouseDuotone,
  PiCompassDuotone,
  PiEyeDuotone,
  PiChartBarDuotone,
  PiChatCircleDuotone,
  PiGearSixDuotone,
  PiEyeSlashDuotone,
  PiCaretDoubleLeftDuotone,
  PiCaretDoubleRightDuotone
} from 'react-icons/pi';
import useAuthStore, { mockLogin, mockLogout } from '../../stores/authStore';
import useProjectStore from '../../stores/projectStore';

const baseNavItems = [
  { id: 'dashboard', path: '/', label: 'Dashboard', icon: PiGaugeDuotone },
  { id: 'settings', path: '/settings', label: 'Settings', icon: PiGearDuotone },
];

const projectNavItems = [
  { id: 'overview', path: '', label: 'Project Overview', icon: PiHouseDuotone, requiredRoles: [] },
  { id: "forms", path: "/submission", label: "Data Submission", icon: PiListChecksDuotone, requiredRoles: ["Researcher", "ProjectLead", "DataEntry"] },
  { id: "builder", path: "/builder", label: "Form Builder", icon: PiSquaresFourDuotone, requiredRoles: ["ProjectLead", "FormDesigner"] },
  { id: "roles", path: "/roles", label: "Role Editor", icon: PiUsersDuotone, requiredRoles: ["ProjectLead"] },
  { id: "search", path: "/search", label: "Patient Search", icon: PiMagnifyingGlassDuotone, requiredRoles: ["Researcher", "ProjectLead", "Clinician"] },
  { id: "scheduler", path: "/notifications", label: "Notifications", icon: PiBellDuotone, requiredRoles: ["ProjectLead", "Coordinator"] },
];

// Sidebar state enum
type SidebarState = 'hidden' | 'collapsed' | 'full';

const Layout: React.FC = () => {
  const [isDarkMode, setIsDarkMode] = useState(() => {
    const savedMode = localStorage.getItem('darkMode');
    return savedMode ? JSON.parse(savedMode) : window.matchMedia('(prefers-color-scheme: dark)').matches;
  });
  const [showProjectSelector, setShowProjectSelector] = useState(false);
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [sidebarState, setSidebarState] = useState<SidebarState>('full');
  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);

  const location = useLocation();
  const navigate = useNavigate();

  const { isAuthenticated, user, activeProjectRoles, setProjectRoles } = useAuthStore();
  const { 
    availableProjects,
    activeProjectId, 
    activeProjectDetails, 
    fetchAvailableProjects, 
    setActiveProject
  } = useProjectStore();

  const userMenuRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (isDarkMode) {
      document.documentElement.classList.add('dark');
      localStorage.setItem('darkMode', JSON.stringify(true));
    } else {
      document.documentElement.classList.remove('dark');
      localStorage.setItem('darkMode', JSON.stringify(false));
    }
  }, [isDarkMode]);

  useEffect(() => {
    const checkScreenSize = () => {
      if (window.innerWidth < 768) {
        setSidebarState('collapsed');
      } else if (window.innerWidth < 1024) {
        setSidebarState('collapsed');
      }
    };
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);
    return () => window.removeEventListener('resize', checkScreenSize);
  }, []);

  useEffect(() => {
    fetchAvailableProjects();
    if(!isAuthenticated && !user) { 
      mockLogin('userLead123'); 
    }
  }, [fetchAvailableProjects, isAuthenticated, user]);

  useEffect(() => {
    if (activeProjectId && user && availableProjects.length > 0) {
      const currentProject = availableProjects.find(p => p.id === activeProjectId);
      if (currentProject) {
        const memberInfo = currentProject.members.find(m => m.userId === user.id);
        if (memberInfo) {
          setProjectRoles(memberInfo.roles);
        } else {
          setProjectRoles([]);
        }
      } else {
        setProjectRoles([]);
      }
    } else if (!activeProjectId || !user) {
      setProjectRoles([]);
    }
  }, [activeProjectId, user, availableProjects, setProjectRoles]);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (userMenuRef.current && !userMenuRef.current.contains(event.target as Node)) {
        setIsUserMenuOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const toggleSidebar = () => {
    setSidebarState(prev => {
      switch (prev) {
        case 'hidden': return 'collapsed';
        case 'collapsed': return 'full';
        case 'full': return 'collapsed';
        default: return 'full';
      }
    });
  };

  const expandSidebar = () => setSidebarState('full');
  const collapseSidebar = () => setSidebarState('collapsed');
  const hideSidebar = () => setSidebarState('hidden');
  const showSidebar = () => setSidebarState('full');

  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode);
    if (!isDarkMode) {
      document.documentElement.classList.add('dark');
      localStorage.setItem('theme', 'dark');
    } else {
      document.documentElement.classList.remove('dark');
      localStorage.setItem('theme', 'light');
    }
  };

  const handleAuthAction = () => {
    if (isAuthenticated) {
      mockLogout();
      navigate('/');
    } else {
      mockLogin('userLead123');
    }
  };

  const handleProjectSelect = (projectId: string) => {
    setActiveProject(projectId);
    navigate(`/project/${projectId}`); 
  };
  
  const mainNavItems = baseNavItems.map(item => ({...item, disabled: false, tooltip: item.label, visible: true}));

  const projectContextMenuItems = activeProjectId ? projectNavItems.map(item => {
    let isDisabled = false;
    let itemTooltip = item.label;
    
    if (item.requiredRoles.length > 0) {
      const hasRequiredRole = item.requiredRoles.some(role => activeProjectRoles.includes(role));
      if (!hasRequiredRole) {
        isDisabled = true;
        itemTooltip = 'You do not have the required role for this feature.';
      }
    }

    return {
      ...item,
      path: `/project/${activeProjectId}${item.path}`,
      disabled: isDisabled,
      tooltip: itemTooltip,
      visible: true,
    };
  }).filter(item => item.visible) : [];

  const getContextNavItems = () => {
    const { pathname } = location;
    
    if (pathname === '/' || pathname === '/dashboard') {
      return [
        { key: 'projects', label: 'Projects', icon: PiHouseDuotone, path: '/', active: true },
        { key: 'analytics', label: 'Analytics', icon: PiChartBarDuotone, path: '/analytics', active: false },
      ];
    }

    if (pathname.startsWith('/project/') && activeProjectId) {
      const contextItems = [
        { key: 'overview', label: 'Overview', icon: PiHouseDuotone, path: `/project/${activeProjectId}`, active: pathname === `/project/${activeProjectId}` },
        { key: 'data', label: 'Enter Data', icon: PiListChecksDuotone, path: `/project/${activeProjectId}/submission`, active: pathname.includes('/submission') },
        { key: 'reports', label: 'View Reports', icon: PiEyeDuotone, path: `/project/${activeProjectId}/reports`, active: pathname.includes('/reports') },
        { key: 'discussions', label: 'Discussions', icon: PiChatCircleDuotone, path: `/project/${activeProjectId}/discussions`, active: pathname.includes('/discussions') },
        { key: 'settings', label: 'Project Settings', icon: PiGearSixDuotone, path: `/project/${activeProjectId}/settings`, active: pathname.includes('/settings') },
      ];
      
      // Add form builder if user has permission
      if (activeProjectRoles.includes('ProjectLead') || activeProjectRoles.includes('FormDesigner')) {
        contextItems.splice(2, 0, { 
          key: 'builder', 
          label: 'Form Builder', 
          icon: PiSquaresFourDuotone, 
          path: `/project/${activeProjectId}/builder`, 
          active: pathname.includes('/builder') 
        });
      }
      
      return contextItems;
    }

    return [];
  };

  // Auto-initialize mock data for development
  useEffect(() => {
    if (!isAuthenticated) {
      console.log('Auto-logging in mock user for development...');
      mockLogin('userLead123');
    }
  }, [isAuthenticated]);

  useEffect(() => {
    if (isAuthenticated && availableProjects.length > 0 && !activeProjectId) {
      console.log('Auto-selecting first project for development...');
      setActiveProject(availableProjects[0].id);
    }
  }, [isAuthenticated, availableProjects, activeProjectId, setActiveProject]);

  const getSidebarWidth = () => {
    switch (sidebarState) {
      case 'hidden': return 'w-0';
      case 'collapsed': return 'w-16';
      case 'full': return 'w-64';
      default: return 'w-64';
    }
  };

  const getContentPadding = () => {
    switch (sidebarState) {
      case 'hidden': return 'lg:pl-0';
      case 'collapsed': return 'lg:pl-16';
      case 'full': return 'lg:pl-64';
      default: return 'lg:pl-64';
    }
  };

  const renderSidebarToggle = () => {
    if (sidebarState === 'full') {
      return (
        <div className="p-4 border-t border-slate-200/60 dark:border-slate-700/60">
          <div className="relative rounded-xl overflow-hidden bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-700 dark:to-slate-800 p-1 shadow-inner">
            <div className="flex relative">
              {/* Collapse Button */}
              <button
                onClick={collapseSidebar}
                className="flex-1 relative z-10 flex items-center justify-center px-4 py-2.5 text-sm font-semibold rounded-lg transition-all duration-300 group"
                title="Collapse sidebar"
              >
                <div className="absolute inset-0 bg-gradient-to-r from-orange-400 via-red-500 to-pink-500 opacity-0 group-hover:opacity-100 rounded-lg transition-all duration-300 shadow-lg"></div>
                <div className="relative flex items-center space-x-2 text-slate-700 dark:text-slate-300 group-hover:text-white transition-colors duration-300">
                  <PiCaretDoubleLeftDuotone className="w-4 h-4" />
                  <span>Collapse</span>
                </div>
              </button>
              
              {/* Hide Button */}
              <button
                onClick={hideSidebar}
                className="flex-1 relative z-10 flex items-center justify-center px-4 py-2.5 text-sm font-semibold rounded-lg transition-all duration-300 group"
                title="Hide sidebar"
              >
                <div className="absolute inset-0 bg-gradient-to-r from-emerald-400 via-teal-500 to-cyan-500 opacity-0 group-hover:opacity-100 rounded-lg transition-all duration-300 shadow-lg"></div>
                <div className="relative flex items-center space-x-2 text-slate-700 dark:text-slate-300 group-hover:text-white transition-colors duration-300">
                  <PiEyeSlashDuotone className="w-4 h-4" />
                  <span>Hide</span>
                </div>
              </button>
            </div>
          </div>
        </div>
      );
    } else if (sidebarState === 'collapsed') {
      return (
        <div className="p-4 border-t border-slate-200/60 dark:border-slate-700/60 space-y-2">
          {/* Expand Button */}
          <button
            onClick={expandSidebar}
            className="w-full relative group flex items-center justify-center p-3 rounded-xl transition-all duration-300 overflow-hidden"
            title="Expand sidebar"
          >
            <div className="absolute inset-0 bg-gradient-to-br from-blue-500 via-indigo-500 to-purple-500 opacity-90 group-hover:opacity-100 transition-opacity duration-300"></div>
            <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
            <PiCaretDoubleRightDuotone className="w-5 h-5 text-white relative z-10 group-hover:scale-110 transition-transform duration-300" />
          </button>
          
          {/* Hide Button */}
          <button
            onClick={hideSidebar}
            className="w-full relative group flex items-center justify-center p-3 rounded-xl transition-all duration-300 overflow-hidden"
            title="Hide sidebar"
          >
            <div className="absolute inset-0 bg-gradient-to-br from-red-500 via-pink-500 to-purple-500 opacity-90 group-hover:opacity-100 transition-opacity duration-300"></div>
            <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
            <PiEyeSlashDuotone className="w-5 h-5 text-white relative z-10 group-hover:scale-110 transition-transform duration-300" />
          </button>
        </div>
      );
    }
    return null;
  };

  const sidebarWidth = getSidebarWidth();
  const contentPadding = getContentPadding();

  const getLogoContent = () => {
    if (window.innerWidth < 640) {
      // Mobile: Icon only
      return (
        <div className="p-2 rounded-xl bg-gradient-to-br from-blue-500 via-indigo-500 to-purple-500 shadow-lg">
          <PiCompassDuotone className="w-6 h-6 text-white" />
        </div>
      );
    } else if (window.innerWidth < 1024) {
      // Tablet: Icon + Name
      return (
        <div className="flex items-center space-x-3">
          <div className="p-2 rounded-xl bg-gradient-to-br from-blue-500 via-indigo-500 to-purple-500 shadow-lg">
            <PiCompassDuotone className="w-6 h-6 text-white" />
          </div>
          <h1 className="text-xl font-bold text-gradient">CREST</h1>
        </div>
      );
    } else {
      // Desktop: Icon + Name + Subtitle
      return (
        <div className="flex items-center space-x-3">
          <div className="p-2 rounded-xl bg-gradient-to-br from-blue-500 via-indigo-500 to-purple-500 shadow-lg">
            <PiCompassDuotone className="w-6 h-6 text-white" />
          </div>
          <div>
            <h1 className="text-xl font-bold text-gradient">CREST</h1>
            <p className="text-xs text-slate-500 dark:text-slate-400 font-medium">Clinical Research Tool</p>
          </div>
        </div>
      );
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/40 to-purple-50/40 dark:from-slate-900 dark:via-indigo-950/50 dark:to-slate-900">
      {/* Sidebar */}
      <aside className={`fixed inset-y-0 left-0 z-40 ${sidebarWidth} transform bg-gradient-to-b from-white via-slate-50/80 to-white dark:from-slate-800 dark:via-slate-900/90 dark:to-slate-800 backdrop-blur-xl border-r-2 border-slate-200/60 dark:border-slate-700/60 shadow-xl dark:shadow-slate-900/20 transition-all duration-300 ease-in-out ${isSidebarOpen ? 'translate-x-0' : sidebarState === 'hidden' ? '-translate-x-full' : 'translate-x-0'} lg:translate-x-0 ${sidebarState === 'hidden' ? 'lg:-translate-x-full' : ''} overflow-hidden`}>
        
        {/* Mobile Header - Close Button */}
        <div className={`flex items-center justify-between p-4 border-b-2 border-slate-200/60 dark:border-slate-700/60 lg:hidden sidebar-header-height`}>
          <span className="text-lg font-semibold text-slate-800 dark:text-slate-200">Menu</span>
          <button
            onClick={() => setIsSidebarOpen(false)}
            className="p-1.5 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
          >
            <PiCaretLeftDuotone className="w-5 h-5 text-slate-600 dark:text-slate-400" />
          </button>
        </div>

        {/* Active Project Display */}
        {activeProjectDetails && sidebarState === 'full' && (
          <div className="px-4 py-3 mx-3 mt-4">
            <div className="relative group">
              <button
                onClick={() => setShowProjectSelector(!showProjectSelector)}
                className="w-full px-4 py-3 rounded-xl bg-gradient-to-r from-blue-50/60 via-indigo-50/40 to-purple-50/60 dark:from-blue-900/20 dark:via-indigo-900/15 dark:to-purple-900/20 border border-blue-200/50 dark:border-blue-800/30 hover:shadow-lg transition-all duration-200 hover:scale-[1.02] text-left"
              >
                <div className="flex items-center justify-between">
                  <div className="flex-1 min-w-0">
                    <p className="text-xs font-semibold text-slate-600 dark:text-slate-400 uppercase tracking-wider">Active Project</p>
                    <p className="text-sm font-bold text-gradient truncate mt-0.5">{activeProjectDetails.name}</p>
                  </div>
                  <PiCaretDownDuotone className={`w-4 h-4 text-slate-500 dark:text-slate-400 transition-transform ${showProjectSelector ? 'rotate-180' : ''}`} />
                </div>
              </button>
              
              {/* Project Selector Dropdown */}
              {showProjectSelector && (
                <div className="absolute top-full left-0 right-0 mt-2 bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-xl shadow-xl z-50 max-h-64 overflow-y-auto">
                  {availableProjects.map((project) => (
                    <button
                      key={project.id}
                      onClick={() => {
                        handleProjectSelect(project.id);
                        setShowProjectSelector(false);
                      }}
                      className={`w-full px-4 py-3 text-left hover:bg-slate-50 dark:hover:bg-slate-700/50 transition-colors ${
                        project.id === activeProjectId ? 'bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500' : ''
                      }`}
                    >
                      <p className="text-sm font-medium text-slate-800 dark:text-slate-200 truncate">{project.name}</p>
                      <p className="text-xs text-slate-500 dark:text-slate-400 truncate">{project.description}</p>
                    </button>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}

        {/* Navigation */}
        <nav className="flex-1 px-3 py-4 space-y-2">
          {/* Main Navigation */}
          <div className="space-y-1">
            {mainNavItems.map((item) => {
              const isActive = location.pathname === item.path;
              return (
                <Link
                  key={item.id}
                  to={item.path}
                  className={`group flex items-center ${sidebarState === 'collapsed' ? 'justify-center px-2' : 'px-3'} py-2.5 rounded-xl text-sm font-medium transition-all duration-200 ${
                    isActive
                      ? 'scale-105 bg-gradient-to-r from-blue-500/20 via-indigo-500/15 to-purple-500/20 dark:from-blue-400/25 dark:via-indigo-400/20 dark:to-purple-400/25 text-blue-700 dark:text-blue-300 shadow-lg dark:shadow-blue-400/20 border border-blue-200/50 dark:border-blue-700/50'
                      : 'hover:scale-[1.02] text-slate-700 dark:text-slate-200 hover:bg-gradient-to-r hover:from-blue-50 hover:to-indigo-50 dark:hover:from-blue-900/20 dark:hover:to-indigo-900/20 hover:shadow-md'
                  }`}
                  title={sidebarState === 'collapsed' ? item.label : undefined}
                >
                  <item.icon className={`${sidebarState === 'collapsed' ? '' : 'mr-3'} flex-shrink-0 transition-colors w-5 h-5 ${
                    isActive
                      ? 'text-blue-700 dark:text-blue-300'
                      : 'text-slate-500 dark:text-slate-400 group-hover:text-blue-600 dark:group-hover:text-blue-400'
                  }`} />
                  {sidebarState === 'full' && item.label}
                </Link>
              );
            })}
          </div>

          {/* Project Navigation */}
          {projectContextMenuItems.length > 0 && (
            <div className="pt-3">
              {sidebarState === 'full' && (
                <div className="px-3 py-2">
                  <h3 className="text-xs font-semibold text-slate-600 dark:text-slate-400 uppercase tracking-wider">Project Tools</h3>
                </div>
              )}
              <div className="space-y-1">
                {projectContextMenuItems.map((item) => {
                  const isActive = location.pathname === item.path;
                  return (
                    <Link
                      key={item.id}
                      to={item.path}
                      className={`group flex items-center ${sidebarState === 'collapsed' ? 'justify-center px-2' : 'px-3'} py-2.5 rounded-xl text-sm font-medium transition-all duration-200 ${
                        item.disabled
                          ? 'text-slate-400 dark:text-slate-600 cursor-not-allowed opacity-50'
                          : isActive
                          ? 'scale-105 bg-gradient-to-r from-purple-500/20 via-pink-500/15 to-orange-500/20 dark:from-purple-400/25 dark:via-pink-400/20 dark:to-orange-400/25 text-purple-700 dark:text-purple-300 shadow-lg dark:shadow-purple-400/20 border border-purple-200/50 dark:border-purple-700/50'
                          : 'hover:scale-[1.02] text-slate-700 dark:text-slate-200 hover:bg-gradient-to-r hover:from-purple-50 hover:to-pink-50 dark:hover:from-purple-900/20 dark:hover:to-pink-900/20 hover:shadow-md'
                      }`}
                      title={sidebarState === 'collapsed' ? item.label : item.tooltip}
                      onClick={item.disabled ? (e) => e.preventDefault() : undefined}
                    >
                      <item.icon className={`${sidebarState === 'collapsed' ? '' : 'mr-3'} flex-shrink-0 transition-colors w-5 h-5 ${
                        item.disabled
                          ? 'text-slate-400 dark:text-slate-600'
                          : isActive
                          ? 'text-purple-700 dark:text-purple-300'
                          : 'text-slate-500 dark:text-slate-400 group-hover:text-purple-600 dark:group-hover:text-purple-400'
                      }`} />
                      {sidebarState === 'full' && item.label}
                    </Link>
                  );
                })}
              </div>
            </div>
          )}
        </nav>

        {/* Sidebar Toggle Controls */}
        {renderSidebarToggle()}
      </aside>

      {/* Floating show button when hidden */}
      {sidebarState === 'hidden' && (
        <div className="fixed top-6 left-6 z-50">
          <button 
            onClick={showSidebar}
            className="p-3 rounded-xl bg-gradient-to-br from-blue-500 via-indigo-500 to-purple-500 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400"
            title="Show sidebar"
          >
            <PiCaretRightDuotone className="w-5 h-5 text-white" />
          </button>
        </div>
      )}

      {/* Main Content */}
      <div className={contentPadding}>
        {/* Fixed Topbar - Superimposed over sidebar */}
        <header className="fixed top-0 left-0 right-0 z-50 bg-white/80 dark:bg-slate-800/80 backdrop-blur-xl border-b border-slate-200/60 dark:border-slate-700/60 shadow-sm header-height">
          <div className="flex items-center h-full px-6">
            {/* Left: Mobile menu button + Logo */}
            <div className="flex items-center space-x-4 flex-shrink-0">
              <button
                onClick={() => setIsSidebarOpen(true)}
                className="lg:hidden p-2 rounded-lg bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 border border-blue-200/50 dark:border-blue-800/30 hover:shadow-md transition-all duration-200"
              >
                <PiMenuIcon className="w-5 h-5 text-slate-600 dark:text-slate-400" />
              </button>
              
              {/* Logo - Responsive */}
              <Link to="/" className="hidden lg:flex group hover:scale-105 transition-transform duration-200">
                {getLogoContent()}
              </Link>
            </div>

            {/* Center: Scrollable Context Navigation */}
            <div className="flex-1 mx-4 min-w-0">
              <div className="flex items-center space-x-1 overflow-x-auto scrollbar-hide pb-1">
                {getContextNavItems().map((item) => (
                  <div
                    key={item.key}
                    className={`context-nav-item ${item.active ? 'active' : ''} flex-shrink-0`}
                    onClick={() => navigate(item.path)}
                  >
                    <item.icon className="icon" />
                    <span className="hidden sm:inline whitespace-nowrap">{item.label}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Right: Fixed User Controls */}
            <div className="flex items-center space-x-2 flex-shrink-0">
              {/* Sidebar Toggle for Desktop */}
              <button
                onClick={toggleSidebar}
                className="hidden lg:flex p-3 rounded-xl bg-gradient-to-r from-slate-50 to-slate-100 dark:from-slate-700 dark:to-slate-800 border border-slate-200/50 dark:border-slate-700/30 hover:shadow-lg transition-all duration-200 hover:scale-105"
                title="Toggle sidebar"
              >
                {sidebarState === 'full' ? (
                  <PiCaretDoubleLeftDuotone className="w-4 h-4 text-slate-600 dark:text-slate-400" />
                ) : sidebarState === 'collapsed' ? (
                  <PiCaretDoubleRightDuotone className="w-4 h-4 text-slate-600 dark:text-slate-400" />
                ) : (
                  <PiCaretRightDuotone className="w-4 h-4 text-slate-600 dark:text-slate-400" />
                )}
              </button>

              {/* Theme toggle */}
              <button
                onClick={toggleDarkMode}
                className="p-3 rounded-xl bg-gradient-to-r from-amber-50 to-orange-50 dark:from-amber-900/20 dark:to-orange-900/20 border border-amber-200/50 dark:border-amber-800/30 hover:shadow-lg transition-all duration-200 hover:scale-105"
                title={isDarkMode ? 'Switch to light mode' : 'Switch to dark mode'}
              >
                {isDarkMode ? (
                  <PiSunDuotone className="w-4 h-4 text-amber-600 dark:text-amber-400" />
                ) : (
                  <PiMoonDuotone className="w-4 h-4 text-slate-600" />
                )}
              </button>

              {/* User menu */}
              <div className="relative" ref={userMenuRef}>
                <button
                  onClick={() => setIsUserMenuOpen(!isUserMenuOpen)}
                  className="flex items-center space-x-2 p-2 pr-3 rounded-xl bg-gradient-to-r from-emerald-50/80 to-teal-50/80 dark:from-emerald-900/30 dark:to-teal-900/30 border border-emerald-200/50 dark:border-emerald-800/50 hover:shadow-lg transition-all duration-200 hover:scale-105"
                >
                  {user && (
                    <>
                      <img
                        src={`https://ui-avatars.com/api/?name=${encodeURIComponent(user.name)}&background=10b981&color=fff&size=32&font-size=0.40&bold=true`}
                        alt={user.name}
                        className="w-8 h-8 rounded-full border-2 border-white dark:border-slate-600 shadow-md"
                      />
                      <div className="hidden sm:block text-left">
                        <p className="text-sm font-semibold text-slate-800 dark:text-slate-100 truncate max-w-[120px]">{user.name}</p>
                        <p className="text-xs text-slate-500 dark:text-slate-400 truncate max-w-[120px]">{user.email}</p>
                      </div>
                      <PiCaretDownDuotone className={`w-4 h-4 text-slate-600 dark:text-slate-400 transition-transform ${isUserMenuOpen ? 'rotate-180' : ''}`} />
                    </>
                  )}
                </button>

                {/* User dropdown */}
                {isUserMenuOpen && (
                  <div className="absolute right-0 mt-2 w-56 rounded-xl shadow-xl bg-white dark:bg-slate-800 border border-slate-200/60 dark:border-slate-700/60 backdrop-blur-xl overflow-hidden z-50">
                    <div className="p-4 bg-gradient-to-r from-emerald-50/50 to-teal-50/50 dark:from-emerald-900/20 dark:to-teal-900/20 border-b border-slate-200/60 dark:border-slate-700/60">
                      <p className="text-sm font-semibold text-slate-800 dark:text-slate-100">{user?.name}</p>
                      <p className="text-xs text-slate-500 dark:text-slate-400">{user?.email}</p>
                      {activeProjectRoles.length > 0 && (
                        <div className="mt-2">
                          <p className="text-xs text-slate-600 dark:text-slate-400">Roles:</p>
                          <div className="flex flex-wrap gap-1 mt-1">
                            {activeProjectRoles.map((role) => (
                              <span
                                key={role}
                                className="px-2 py-1 text-xs bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 rounded-md"
                              >
                                {role}
                              </span>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                    <button
                      onClick={handleAuthAction}
                      className="w-full flex items-center px-4 py-3 text-sm text-red-600 dark:text-red-400 hover:bg-gradient-to-r hover:from-red-50 hover:to-rose-50 dark:hover:from-red-900/20 dark:hover:to-rose-900/20 transition-all duration-200"
                    >
                      <PiSignOutDuotone className="w-4 h-4 mr-3" />
                      Sign out
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </header>

        {/* Main content area - with top padding for fixed header */}
        <main className="pt-[72px] min-h-screen bg-gradient-to-br from-slate-50/50 via-blue-50/30 to-purple-50/50 dark:from-slate-900/50 dark:via-indigo-950/30 dark:to-slate-900/50">
          <div className="animation-fade-in">
            <Outlet />
          </div>
        </main>
      </div>

      {/* Mobile overlay */}
      {isSidebarOpen && (
        <div
          className="fixed inset-0 z-30 bg-slate-900/50 backdrop-blur-sm lg:hidden"
          onClick={() => setIsSidebarOpen(false)}
        />
      )}
    </div>
  );
};

export default Layout; 


###############################################################################
### FILE: components/ui/AutocompleteInput.tsx
###############################################################################
// frontend/src/components/ui/AutocompleteInput.tsx
import React, { useState, useEffect, useRef } from 'react';

// Structure for the data items we are searching
export interface AutocompleteOption {
  value: string;
  label: string;
  // Include other relevant data, like icd10 for diagnoses
  [key: string]: any; // Allow other properties like icd10
}

interface AutocompleteInputProps {
  label: string;
  id: string;
  placeholder?: string;
  options: AutocompleteOption[]; // The *full* list of searchable options (for simulation)
  onSelect: (selectedOption: AutocompleteOption | null) => void; // Callback when an item is selected
  className?: string; // For the main container div
  labelClassName?: string; // For the label element
  inputClassName?: string; // For the input element
}

const AutocompleteInput: React.FC<AutocompleteInputProps> = ({
  label,
  id,
  placeholder = "Digite para buscar...",
  options,
  onSelect,
  className = '',
  labelClassName = '',
  inputClassName = '',
}) => {
  const [inputValue, setInputValue] = useState('');
  const [filteredOptions, setFilteredOptions] = useState<AutocompleteOption[]>([]);
  const [isListVisible, setIsListVisible] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null); // Ref for detecting clicks outside

  // Filter options based on input value
  useEffect(() => {
    if (inputValue.length > 1) { // Start filtering after 2+ characters
      const lowerCaseInput = inputValue.toLowerCase();
      setFilteredOptions(
        options.filter(option =>
          option.label.toLowerCase().includes(lowerCaseInput) ||
          (option.value && option.value.toLowerCase().includes(lowerCaseInput)) ||
          (option.icd10 && option.icd10.toLowerCase().includes(lowerCaseInput)) // Also search ICD code if present
        ).slice(0, 10) // Limit results for performance/UI
      );
      setIsListVisible(true);
    } else {
      setFilteredOptions([]);
      setIsListVisible(false);
    }
  }, [inputValue, options]);

  // Handle clicks outside the component to close the dropdown
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {
        setIsListVisible(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);


  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInputValue(event.target.value);
  };

  const handleOptionClick = (option: AutocompleteOption) => {
    setInputValue(''); // Clear input after selection
    setFilteredOptions([]);
    setIsListVisible(false);
    onSelect(option); // Call the parent's onSelect handler
  };

  const finalLabelClassName = ['form-label', labelClassName].filter(Boolean).join(' ');
  const finalInputClassName = ['input-base', inputClassName].filter(Boolean).join(' ');

  return (
    <div className={`relative ${className}`} ref={containerRef}>
      <label htmlFor={id} className={finalLabelClassName}>{label}</label>
      <input
        type="text"
        id={id}
        value={inputValue}
        onChange={handleInputChange}
        onFocus={() => { if (inputValue.length > 1) setIsListVisible(true); }} // Show list on focus if input exists
        placeholder={placeholder}
        className={finalInputClassName}
        autoComplete="off" // Prevent browser autocomplete interfering
      />
      {/* Suggestions List */}
      {isListVisible && filteredOptions.length > 0 && (
        <ul className="absolute z-10 mt-1 w-full bg-white dark:bg-slate-700 shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black dark:ring-slate-600 ring-opacity-5 dark:ring-opacity-100 overflow-auto focus:outline-none sm:text-sm">
          {filteredOptions.map((option) => (
            <li
              key={option.value}
              onClick={() => handleOptionClick(option)}
              className="text-slate-900 dark:text-slate-200 cursor-pointer select-none relative py-2 pl-3 pr-9 hover:bg-blue-50 dark:hover:bg-slate-600"
            >
              {/* Display label and potentially other info like ICD10 */}
              <span className="block truncate font-normal">
                {option.label}
                {option.icd10 && <span className="text-xs text-slate-500 dark:text-slate-400 ml-2">({option.icd10})</span>}
              </span>
            </li>
          ))}
        </ul>
      )}
       {isListVisible && inputValue.length > 1 && filteredOptions.length === 0 && (
         <div className="absolute z-10 mt-1 w-full bg-white dark:bg-slate-700 shadow-lg rounded-md p-3 text-sm text-slate-500 dark:text-slate-400">
             Nenhum resultado encontrado.
         </div>
       )}
    </div>
  );
};

export default AutocompleteInput;

// Define the type for selected diagnosis objects
export interface SelectedDiagnosis {
  value: string;
  label: string;
  icd10?: string; // ICD10 code is optional for now
}


###############################################################################
### FILE: components/ui/Button.tsx
###############################################################################
import React from 'react';
import { PiSpinnerGap } from 'react-icons/pi'; // Using a spinner icon

type ButtonVariant = 
  | 'primary' 
  | 'secondary' 
  | 'success' 
  | 'danger' 
  | 'warning' 
  | 'outline-primary' 
  | 'outline-slate' 
  | 'ghost' 
  | 'link';

type ButtonSize = 'sm' | 'md' | 'lg';

// Define an interface for icon props that we expect (className and size)
interface IconProps {
  className?: string;
  size?: string | number;
  // Add other common icon props if necessary
}

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: ButtonVariant;
  size?: ButtonSize;
  isLoading?: boolean;
  iconLeft?: React.ReactElement<IconProps>; // Specify that iconLeft/Right accept IconProps
  iconRight?: React.ReactElement<IconProps>;
  fullWidth?: boolean;
  children: React.ReactNode;
  asChild?: boolean; // Add asChild prop
}

const Button: React.FC<ButtonProps> = React.forwardRef<
  HTMLButtonElement,
  ButtonProps
>(
  (
    {
      children,
      variant = 'primary',
      size = 'md',
      isLoading = false,
      iconLeft,
      iconRight,
      fullWidth = false,
      asChild = false, // Default asChild to false
      className = '',
      disabled,
      ...props
    },
    ref
  ) => {
    const baseClasses = 'btn'; // From index.css
    const variantClasses = {
      primary: 'btn-primary',
      secondary: 'btn-secondary',
      success: 'btn-success',
      danger: 'btn-danger',
      warning: 'btn-warning',
      'outline-primary': 'btn-outline-primary',
      'outline-slate': 'btn-outline-slate',
      ghost: 'btn-ghost',
      link: 'btn-link',
    };
    const sizeClasses = {
      sm: 'btn-sm',
      md: '', // Base .btn already has medium padding
      lg: 'btn-lg',
    };

    const combinedClassName = [
      baseClasses,
      variantClasses[variant],
      sizeClasses[size],
      fullWidth ? 'w-full' : '',
      isLoading ? 'cursor-wait' : '',
      className, // Allow additional custom classes
    ].filter(Boolean).join(' ');

    const iconSize = size === 'sm' ? 16 : 18;
    const iconMarginClass = children && size === 'sm' ? 'mr-1.5' : children ? 'mr-2' : '';
    const iconMarginClassRight = children && size === 'sm' ? 'ml-1.5' : children ? 'ml-2' : '';

    const buttonContent = (
      <>
        {isLoading && (
          <PiSpinnerGap className={`animate-spin ${iconLeft || iconRight || children ? (size === 'sm' ? 'mr-1.5' : 'mr-2') : ''}`} size={size === 'sm' ? 16 : 20} />
        )}
        {!isLoading && iconLeft && React.cloneElement(iconLeft, {
           className: `${iconMarginClass} ${iconLeft.props.className || ''}`.trim(),
           size: iconLeft.props.size || iconSize 
        })}
        {!isLoading && children}
        {!isLoading && iconRight && React.cloneElement(iconRight, {
            className: `${iconMarginClassRight} ${iconRight.props.className || ''}`.trim(),
            size: iconRight.props.size || iconSize
        })}
      </>
    );

    if (asChild && React.isValidElement<React.HTMLAttributes<HTMLElement>>(children)) {
      // Type assertion for children to ensure props like className are recognized.
      const childProps = children.props as React.HTMLAttributes<HTMLElement>;

      return React.cloneElement(
        children as React.ReactElement<React.HTMLAttributes<HTMLElement>>,
        {
          className: `${combinedClassName} ${childProps.className || ''}`.trim(),
          // `disabled` is not a standard HTML attribute for all elements (e.g. `a` tag from Link).
          // Visual disabled state is handled by classes. True non-interactivity for Link
          // would require event.preventDefault() or not rendering it as a Link.
          // We pass other ...props which might include aria-disabled if set by parent.
          ...props, 
        }
      );
    }

    return (
      <button
        ref={ref}
        className={combinedClassName}
        disabled={disabled || isLoading}
        {...props}
      >
        {buttonContent}
      </button>
    );
  }
);

Button.displayName = 'Button';

export default Button; 


###############################################################################
### FILE: components/ui/CheckboxGroupField.tsx
###############################################################################
// frontend/src/components/ui/CheckboxGroupField.tsx
import React from 'react';

interface CheckboxOption {
  value: string;
  label: string;
}

interface CheckboxGroupFieldProps {
  label: string; // This is the legend text
  idPrefix: string;
  options: CheckboxOption[];
  selectedValues: string[];
  onChange: (value: string) => void;
  className?: string; // For the fieldset container
  legendClassName?: string; // For the legend element
}

const CheckboxGroupField: React.FC<CheckboxGroupFieldProps> = ({
  label,
  idPrefix,
  options,
  selectedValues,
  onChange,
  className = '',
  legendClassName = '',
}) => {
  const fieldsetClasses = ['form-field', className].filter(Boolean).join(' ');
  // .form-label already has mb-1, but legend typically has more space after, so mb-2 from original is fine.
  const finalLegendClassName = ['form-label', legendClassName, 'mb-2'].filter(Boolean).join(' ');

  return (
    <fieldset className={fieldsetClasses}>
      <legend className={finalLegendClassName}>{label}</legend>
      {/* Use CSS Grid with auto-fit for dynamic columns */}
      {/* Adjust minmax(200px, 1fr) as needed for desired minimum item width */}
      <div className="grid grid-cols-[repeat(auto-fit,minmax(200px,1fr))] gap-x-4 gap-y-2">
        {options.map((option) => {
          const fieldId = `${idPrefix}-${option.value}`;
          const isChecked = selectedValues.includes(option.value);

          return (
            // Container for each item
            <div key={option.value} className="flex items-center">
              <input
                id={fieldId}
                name={fieldId}
                type="checkbox"
                value={option.value}
                checked={isChecked}
                onChange={() => onChange(option.value)}
                className="h-4 w-4 text-blue-600 dark:text-blue-500 border-slate-300 dark:border-slate-600 rounded focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-offset-0 dark:focus:ring-offset-slate-800 flex-shrink-0"
              />
              <label htmlFor={fieldId} className="ml-2 block text-sm text-slate-900 dark:text-slate-300 break-words cursor-pointer">
                {option.label}
              </label>
            </div>
          );
        })}
      </div>
    </fieldset>
  );
};

export default CheckboxGroupField;


###############################################################################
### FILE: components/ui/DashboardGreetingCard.tsx
###############################################################################
import React from 'react';
import { PiPlusCircleDuotone, PiIdentificationCardDuotone, PiArrowSquareOutDuotone } from 'react-icons/pi';
import Button from './Button'; // Assuming Button is in the same ui directory
import useAuthStore from '../../stores/authStore'; // To get user info

interface DashboardGreetingCardProps {
  onCreateNewProject: () => void;
  onViewProfile: () => void; // Placeholder for now
}

const DashboardGreetingCard: React.FC<DashboardGreetingCardProps> = ({
  onCreateNewProject,
  onViewProfile,
}) => {
  const { user } = useAuthStore();

  return (
    <section
      className="relative card-base p-6 sm:p-8 rounded-xl shadow-xl 
                 border border-slate-200 dark:border-slate-700/80 overflow-hidden
                 bg-gradient-to-br from-slate-100 via-white to-slate-100 
                 dark:from-slate-800 dark:via-slate-700 dark:to-slate-800 
                 dark:shadow-[0_0_30px_rgba(var(--color-primary-500),0.2)] 
                 dark:sm:shadow-[0_0_40px_rgba(var(--color-primary-400),0.25)]"
    >
      <div className="absolute -top-1/4 -left-1/4 w-1/2 h-1/2 bg-blue-400/30 dark:bg-blue-500/20 rounded-full filter blur-3xl opacity-50 animate-pulse"></div>
      <div className="absolute -bottom-1/4 -right-1/4 w-1/2 h-1/2 bg-purple-400/30 dark:bg-purple-500/20 rounded-full filter blur-3xl opacity-50 animation-delay-2000 animate-pulse"></div>

      <div className="relative z-10 flex flex-col md:flex-row items-start md:items-center justify-between gap-6">
        <div className="flex-1">
          <h1 className="text-3xl md:text-4xl font-bold text-slate-800 dark:text-slate-100">
            Welcome back, <span className="text-gradient">{user?.name || 'User'}</span>!
          </h1>
          <p className="mt-2 text-slate-600 dark:text-slate-300 text-lg">
            Welcome to <span className="font-semibold text-gradient">CREST</span> - your Clinical REsearch Study Tool. Manage projects, track progress, and stay updated.
          </p>
        </div>
        <div className="shrink-0">
          <Button
            variant="primary"
            size="lg"
            iconLeft={<PiPlusCircleDuotone />}
            onClick={onCreateNewProject}
            className="shadow-lg dark:shadow-blue-500/30"
          >
            Create New Project
          </Button>
        </div>
      </div>

      <div className="relative z-10 mt-8 p-6 bg-white/60 dark:bg-slate-700/50 backdrop-blur-md rounded-lg shadow-inner border border-slate-200 dark:border-slate-700/60">
        <div className="flex items-center">
          <PiIdentificationCardDuotone className="text-5xl text-blue-500 dark:text-blue-400 mr-5 shrink-0" />
          <div className="flex-1 min-w-0"> {/* Added min-w-0 for potential truncation */}
            <h2 className="text-xl font-semibold text-slate-700 dark:text-slate-200">Profile Snapshot</h2>
            {user ? (
              <p className="text-sm text-slate-500 dark:text-slate-400 truncate">
                {user.email}
              </p>
            ) : (
              <p className="text-sm text-slate-500 dark:text-slate-400">User details not available.</p>
            )}
            <Button variant="link" size="sm" className="mt-1 px-0 py-0 text-blue-600 dark:text-blue-400" onClick={onViewProfile}>
              View Full Profile <PiArrowSquareOutDuotone className="ml-1" />
            </Button>
          </div>
        </div>
      </div>
    </section>
  );
};

export default DashboardGreetingCard; 


###############################################################################
### FILE: components/ui/DrugInputField.tsx
###############################################################################
// frontend/src/components/ui/DrugInputField.tsx
import React, { useState, useEffect, useRef } from 'react';

interface DrugInputFieldProps {
  drugName: string;
  drugId: string;
  unit: string;
  isSelected: boolean; // Controlled from parent: whether the drug *was used*
  value: string | number; // Parent should manage if it's string or number internally
  onSelectToggle: () => void;
  onValueChange: (value: string) => void; // Standardize to string for this component's output
  inputType?: 'text' | 'number' | 'stepper';
  colorClass?: string;
}

const DrugInputField: React.FC<DrugInputFieldProps> = ({
  drugName,
  drugId,
  unit,
  isSelected, // Prop indicating if drug is selected (checked)
  value,      // Prop holding the saved value from parent state
  onSelectToggle,
  onValueChange,
  inputType = 'number',
  colorClass = 'bg-transparent',
}) => {
  const [internalEditorValue, setInternalEditorValue] = useState(String(value));
  const inputRef = useRef<HTMLInputElement>(null);

  const uniqueCheckboxId = `drug-select-${drugId}`;
  const uniqueValueInputId = `drug-value-${drugId}`;

  // Sync local editor state if prop `value` changes from parent
  useEffect(() => {
    setInternalEditorValue(String(value));
  }, [value]);

  const handleEditorChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInternalEditorValue(event.target.value);
  };

  const processAndCommitChange = () => {
    let processedValue = internalEditorValue;
    if (inputType === 'number' || inputType === 'stepper') {
      const num = parseFloat(internalEditorValue);
      processedValue = isNaN(num) ? '' : String(num); // Convert valid number to string, or empty string
    }
    onValueChange(processedValue);
  };

  const handleEditorBlur = () => {
    processAndCommitChange();
  };

  const handleEditorKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === 'Enter') {
      processAndCommitChange();
      inputRef.current?.blur();
    }
    if (event.key === 'Escape') {
      setInternalEditorValue(String(value)); // Revert to original value from prop
      inputRef.current?.blur();
    }
  };

  return (
    <div className={`drug-input-field p-2 rounded-md border ${isSelected ? 'border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700' : 'border-transparent'} ${colorClass} transition-all duration-150`}>
      <div className="flex items-center mb-1">
        <input
          type="checkbox"
          id={uniqueCheckboxId}
          checked={isSelected}
          onChange={onSelectToggle}
          className="h-4 w-4 text-blue-600 dark:text-blue-500 border-slate-300 dark:border-slate-500 focus:ring-blue-500 dark:focus:ring-blue-600 rounded mr-2 shrink-0"
        />
        <label htmlFor={uniqueCheckboxId} className="ml-0.5 flex-1 text-sm font-medium text-slate-700 dark:text-slate-200 truncate cursor-pointer select-none">
          {drugName}
        </label>
      </div>
      {isSelected && (
        <div className="flex items-center mt-1.5 space-x-1.5 pl-6"> {/* Indent value input slightly */}
          <input
            id={uniqueValueInputId}
            type={(inputType === 'stepper' || inputType === 'number') ? 'number' : 'text'}
            value={internalEditorValue}
            onChange={handleEditorChange}
            onBlur={handleEditorBlur}
            onKeyDown={handleEditorKeyDown}
            ref={inputRef}
            placeholder="Dose"
            className="input-base input-sm w-full flex-grow"
            aria-label={`Value for ${drugName}`}
            step={(inputType === 'stepper' || inputType === 'number') ? 'any' : undefined}
          />
          <span className="text-xs text-slate-500 dark:text-slate-400 whitespace-nowrap pl-1 shrink-0">{unit}</span>
        </div>
      )}
    </div>
  );
};

export default DrugInputField;

// Helper type for ref casting, if needed elsewhere or causing issues
// type InputRefType = React.RefObject<HTMLInputElement>;

// Add simple fade-in animation to index.css if desired:
/*
@keyframes fadeIn { from { opacity: 0; transform: translateY(-5px); } to { opacity: 1; transform: translateY(0); } }
.animation-fade-in { animation: fadeIn 0.2s ease-out forwards; }
*/


###############################################################################
### FILE: components/ui/InputField.tsx
###############################################################################
// frontend/src/components/ui/InputField.tsx
import React, { forwardRef } from 'react'; // Import forwardRef

interface InputFieldProps {
  label: string;
  id: string;
  type: 'text' | 'number' | 'email' | 'password' | 'date';
  placeholder?: string;
  value: string | number;
  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
  onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;
  required?: boolean;
  className?: string; // For the container div
  inputClassName?: string; // For the input element itself
  labelClassName?: string; // For the label element
}

// Define the type for the ref (will be an HTMLInputElement)
type Ref = HTMLInputElement;

// Wrap the component definition with forwardRef
const InputField = forwardRef<Ref, InputFieldProps>(({
  // Props remain the same
  label,
  id,
  type,
  placeholder,
  value,
  onChange,
  onKeyDown,
  onBlur,
  required = false,
  className = '',
  inputClassName = '',
  labelClassName = '',
}, ref // Add the ref as the second argument provided by forwardRef
) => {
  // Combine base global classes with user-provided classes
  const containerClasses = ['form-field', className].filter(Boolean).join(' ');
  const labelClasses = ['form-label', labelClassName].filter(Boolean).join(' ');
  const inputClasses = ['input-base', inputClassName].filter(Boolean).join(' ');

  return (
    <div className={containerClasses}>
      <label htmlFor={id} className={labelClasses}>
        {label}
        {required && <span className="text-red-500 ml-1">*</span>}
      </label>
      <input
        // Pass the received ref directly to the underlying input element
        ref={ref}
        type={type}
        id={id}
        name={id}
        value={value}
        onChange={onChange}
        onKeyDown={onKeyDown}
        onBlur={onBlur}
        placeholder={placeholder}
        required={required}
        className={inputClasses} // Removed mt-1 as form-label provides mb-1
      />
    </div>
  );
});

// Optional: Set a display name for better debugging
InputField.displayName = 'InputField';

export default InputField;


###############################################################################
### FILE: components/ui/PageHeader.tsx
###############################################################################
import React from 'react';
import { IconType } from 'react-icons';

interface PageHeaderProps {
  title: string;
  subtitle?: string;
  icon?: IconType;
  gradient?: 'primary' | 'secondary' | 'accent' | 'warm' | 'cool';
  children?: React.ReactNode;
}

const PageHeader: React.FC<PageHeaderProps> = ({
  title,
  subtitle,
  icon: Icon,
  gradient = 'primary',
  children
}) => {
  const gradientClasses = {
    primary: 'bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600',
    secondary: 'bg-gradient-to-r from-emerald-500 via-teal-500 to-cyan-500',
    accent: 'bg-gradient-to-r from-orange-500 via-red-500 to-pink-500',
    warm: 'bg-gradient-to-r from-amber-500 via-orange-500 to-red-500',
    cool: 'bg-gradient-to-r from-cyan-500 via-blue-500 to-indigo-500'
  };

  const iconColors = {
    primary: 'text-blue-500 dark:text-blue-400',
    secondary: 'text-emerald-500 dark:text-emerald-400',
    accent: 'text-orange-500 dark:text-orange-400',
    warm: 'text-amber-500 dark:text-amber-400',
    cool: 'text-cyan-500 dark:text-cyan-400'
  };

  return (
    <div className="relative overflow-hidden bg-gradient-to-br from-white via-slate-50/80 to-white dark:from-slate-800 dark:via-slate-700/80 dark:to-slate-800 border-b-2 border-slate-200/60 dark:border-slate-700/60 shadow-lg mb-6">
      {/* Decorative background elements */}
      <div className={`absolute inset-0 opacity-10 dark:opacity-5 ${gradientClasses[gradient]}`}></div>
      <div className="absolute -top-1/2 -right-1/4 w-1/2 h-full bg-gradient-to-l from-white/20 to-transparent dark:from-slate-700/20 rounded-full transform rotate-12"></div>
      
      <div className="relative z-10 px-4 sm:px-6 py-6 sm:py-8">
        <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
          <div className="flex-1">
            <div className="flex items-center gap-3 mb-2">
              {Icon && (
                <div className="p-2 rounded-xl bg-white/80 dark:bg-slate-700/80 shadow-lg">
                  <Icon className={`w-6 h-6 ${iconColors[gradient]}`} />
                </div>
              )}
              <h1 className="text-2xl sm:text-3xl font-bold text-slate-800 dark:text-slate-100">
                {title}
              </h1>
            </div>
            {subtitle && (
              <p className="text-slate-600 dark:text-slate-300 text-lg max-w-2xl">
                {subtitle}
              </p>
            )}
          </div>
          
          {children && (
            <div className="flex-shrink-0">
              {children}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default PageHeader; 


###############################################################################
### FILE: components/ui/QuickSelectButtons.tsx
###############################################################################
// frontend/src/components/ui/QuickSelectButtons.tsx
import React from 'react';
import Button from './Button'; // Import the Button component

// Expects options similar to checkboxes but will render buttons
interface QuickSelectOption {
  value: string;
  label: string;
}

interface QuickSelectButtonsProps {
  options: QuickSelectOption[];
  selectedValues: string[]; // Array of currently selected values
  onToggle: (value: string) => void; // Function to call when a button is clicked
  className?: string; // Class for the container div
  buttonClassName?: string; // Optional class for individual buttons
  selectedVariant?: 'primary' | 'secondary' | 'success'; // Allow customizing selected variant
  defaultVariant?: 'outline-slate' | 'ghost' | 'outline-primary'; // Allow customizing default variant
}

const QuickSelectButtons: React.FC<QuickSelectButtonsProps> = ({
  options,
  selectedValues,
  onToggle,
  className = '',
  buttonClassName = '',
  selectedVariant = 'primary',
  defaultVariant = 'outline-slate',
}) => {
  return (
    // Use flex-wrap for button layout
    <div className={`flex flex-wrap gap-2 ${className}`}>
      {options.map((option) => {
        const isSelected = selectedValues.includes(option.value);
        return (
          <Button
            key={option.value}
            type="button" // Important: Prevent form submission if inside a form
            onClick={() => onToggle(option.value)}
            variant={isSelected ? selectedVariant : defaultVariant}
            size="sm" // Defaulting to small size, suitable for quick select
            className={`rounded-full ${buttonClassName}`} // Apply rounded-full and any custom class
          >
            {option.label}
          </Button>
        );
      })}
    </div>
  );
};

export default QuickSelectButtons;


###############################################################################
### FILE: components/ui/RadioButtonGroupField.tsx
###############################################################################
// frontend/src/components/ui/RadioButtonGroupField.tsx
import React from 'react';

interface RadioOption {
  value: string | number;
  label: string;
}

interface RadioButtonGroupFieldProps {
  label: string; // Legend text
  idPrefix: string;
  options: RadioOption[];
  selectedValue: string | number | null;
  onChange: (value: string | number) => void;
  className?: string; // For the fieldset container
  legendClassName?: string; // For the legend element
  required?: boolean;
}

const RadioButtonGroupField: React.FC<RadioButtonGroupFieldProps> = ({
  label,
  idPrefix,
  options,
  selectedValue,
  onChange,
  className = '',
  legendClassName = '',
  required = false,
}) => {
  const groupName = `${idPrefix}-radio-group`;
  const fieldsetClasses = ['form-field', className].filter(Boolean).join(' ');
  const finalLegendClassName = ['form-label', legendClassName, 'mb-2'].filter(Boolean).join(' ');

  return (
    <fieldset className={fieldsetClasses}>
      <legend className={finalLegendClassName}>
        {label}
        {required && <span className="text-red-500 ml-1">*</span>}
      </legend>
      {/* Use CSS Grid with auto-fit */}
      {/* Adjust minmax(180px, 1fr) as needed */}
      <div className="grid grid-cols-[repeat(auto-fit,minmax(180px,1fr))] gap-x-4 gap-y-2">
        {options.map((option, index) => {
          const fieldId = `${idPrefix}-${option.value}`;
          const isChecked = selectedValue === option.value;

          return (
            // Container for each item
            <div key={option.value} className="flex items-center">
              <input
                id={fieldId}
                name={groupName}
                type="radio"
                value={option.value}
                checked={isChecked}
                onChange={() => onChange(option.value)}
                required={required && index === 0} // Only one radio in a group needs to be required for HTML5 validation
                className="h-4 w-4 text-blue-600 dark:text-blue-500 border-slate-300 dark:border-slate-600 focus:ring-blue-500 dark:focus:ring-blue-600 focus:ring-offset-0 dark:focus:ring-offset-slate-800 flex-shrink-0"
              />
              <label htmlFor={fieldId} className="ml-2 block text-sm text-slate-900 dark:text-slate-300 break-words cursor-pointer">
                {option.label}
              </label>
            </div>
          );
        })}
      </div>
    </fieldset>
  );
};

export default RadioButtonGroupField;


###############################################################################
### FILE: components/ui/SectionCard.tsx
###############################################################################
// src/components/ui/SectionCard.tsx
import React from 'react';

interface SectionCardProps {
  title: string; // The title to display in the card's header
  children: React.ReactNode; // Content to render inside the card body
  className?: string; // Optional additional CSS classes for the outer section element
  headerClassName?: string; // For the header div
  titleClassName?: string; // For the h2 title
  bodyClassName?: string; // For the body div
}

const SectionCard: React.FC<SectionCardProps> = ({
  title,
  children,
  className = '',
  headerClassName = '',
  titleClassName = '',
  bodyClassName = '',
}) => {
  const finalCardClassName = ['card-base', className].filter(Boolean).join(' ');
  const finalHeaderClassName = ['card-header', headerClassName].filter(Boolean).join(' ');
  const finalTitleClassName = ['card-title', titleClassName].filter(Boolean).join(' ');
  const finalBodyClassName = ['card-body', bodyClassName].filter(Boolean).join(' '); // .card-body includes padding

  return (
    <section className={`${finalCardClassName} mb-6`}> {/* Retaining mb-6 for now as it was an outer style */}
      <div className={finalHeaderClassName}>
        <h2 className={finalTitleClassName}>{title}</h2>
      </div>
      <div className={finalBodyClassName}>
        {children}
      </div>
    </section>
  );
};

export default SectionCard;


###############################################################################
### FILE: components/ui/SelectField.tsx
###############################################################################
// src/components/ui/SelectField.tsx
import React from 'react';

// Define structure for individual dropdown options
interface SelectOption {
  value: string | number; // The actual value sent when selected
  label: string;         // The text displayed in the dropdown
}

// Define props for the SelectField component
interface SelectFieldProps {
  label: string;
  id: string;
  value: string | number; // Currently selected value
  onChange: (event: React.ChangeEvent<HTMLSelectElement>) => void; // Handler for selection change
  options: SelectOption[]; // Array of available options
  required?: boolean;
  className?: string; // For the container div
  selectClassName?: string; // For the select element itself
  labelClassName?: string; // For the label element
  placeholder?: string; // Optional placeholder text (for the default disabled option)
}

const SelectField: React.FC<SelectFieldProps> = ({
  label,
  id,
  value,
  onChange,
  options,
  required = false,
  className = '',
  selectClassName = '', // Added for select specific classes
  labelClassName = '',
  placeholder = 'Selecione...', // Default placeholder
}) => {
  const containerClasses = ['form-field', className].filter(Boolean).join(' ');
  const labelClasses = ['form-label', labelClassName].filter(Boolean).join(' ');
  // Select elements have some specific default styling, so we might need to be careful here.
  // .input-base provides border, bg, text color, focus, disabled states.
  // We might need to add back pr-10 for the arrow icon space if .input-base doesn't account for it.
  const selectBaseClasses = 'input-base pr-10'; // Added pr-10 for select arrow
  const finalSelectClasses = [selectBaseClasses, selectClassName].filter(Boolean).join(' ');

  return (
    <div className={containerClasses}>
      {/* Label */}
      <label htmlFor={id} className={labelClasses}>
        {label}
        {required && <span className="text-red-500 ml-1">*</span>}
      </label>
      {/* Select Dropdown */}
      <select
        id={id}
        name={id}
        value={value} // Bind displayed selection to the 'value' prop
        onChange={onChange} // Attach the onChange handler
        required={required}
        className={finalSelectClasses} // Removed mt-1, uses .input-base + specific select needs
      >
        {/* Default Placeholder Option */}
        <option value="" disabled hidden={!placeholder} className="text-slate-500 dark:text-slate-400 dark:bg-slate-700">
          {placeholder}
        </option>
        {/* Dynamically create options from the 'options' prop array */}
        {options.map((option) => (
          <option key={option.value} value={option.value} className="text-slate-900 dark:text-slate-200 dark:bg-slate-700">
            {option.label}
          </option>
        ))}
      </select>
    </div>
  );
};

export default SelectField;


###############################################################################
### FILE: components/ui/SelectedItemTags.tsx
###############################################################################
// frontend/src/components/ui/SelectedItemTags.tsx
import React from 'react';
import { SelectedDiagnosis } from './AutocompleteInput'; // Import the type
import Button from './Button'; // Import the Button component
import { PiX } from 'react-icons/pi'; // Import an X icon

interface SelectedItemTagsProps {
  items: SelectedDiagnosis[]; // Array of selected items (using the exported type)
  onRemove: (valueToRemove: string) => void; // Function to call when removing an item
  className?: string; // Class for the container div
  noItemsText?: string; // Text to display when no items are selected
  tagClassName?: string; // Custom class for each tag pill
  removeButtonClassName?: string; // Custom class for the remove button
}

const SelectedItemTags: React.FC<SelectedItemTagsProps> = ({
  items,
  onRemove,
  className = '',
  noItemsText = 'Nenhum item selecionado.',
  tagClassName = '',
  removeButtonClassName = '',
}) => {
  if (!items || items.length === 0) {
    return <p className={`text-sm text-slate-500 dark:text-slate-400 italic ${className}`}>{noItemsText}</p>;
  }

  const baseTagClasses = "flex items-center bg-blue-100 dark:bg-slate-600 text-blue-800 dark:text-slate-100 text-sm font-medium px-3 py-1 rounded-full";
  const finalTagClassName = [baseTagClasses, tagClassName].filter(Boolean).join(' ');
  
  // Specific styling for the small 'x' button within a tag
  const baseRemoveButtonClasses = "p-0.5 -mr-2 ml-1.5 rounded-full hover:bg-blue-200 dark:hover:bg-slate-500";
  const finalRemoveButtonClassName = [baseRemoveButtonClasses, removeButtonClassName].filter(Boolean).join(' ');

  return (
    <div className={`flex flex-wrap gap-2 ${className}`}>
      {items.map((item) => (
        <div
          key={item.value}
          className={finalTagClassName}
        >
          <span>
            {item.label}
            {item.icd10 && <span className="text-xs text-blue-600 dark:text-slate-300 ml-1">({item.icd10})</span>}
          </span>
          <Button
            type="button"
            variant="ghost" // Ghost variant is suitable for an icon-only button inside a tag
            size="sm" // Small size
            onClick={() => onRemove(item.value)}
            iconLeft={<PiX size={14}/>} // Use the PiX icon
            className={finalRemoveButtonClassName}
            aria-label={`Remover ${item.label}`}
          >{null}</Button> 
        </div>
      ))}
    </div>
  );
};

export default SelectedItemTags;


###############################################################################
### FILE: components/ui/StepperInput.tsx
###############################################################################
// frontend/src/components/ui/StepperInput.tsx
import React from 'react';
import Button from './Button'; // Import the new Button component

interface StepperInputProps {
    id: string;
    label: string;
    labelClassName?: string; // ADDED: For the label element
    value: number;
    onChange: (newValue: number) => void;
    min?: number;
    max?: number;
    step?: number;
    className?: string; // For the container div
    inputClassName?: string; // For the input element itself
    // Add props for onKeyDown/onBlur if needed for the inner input
    onInputKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
    onInputBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;
}

const StepperInput: React.FC<StepperInputProps> = ({
    id,
    label,
    // Default label class, apply prop if provided
    labelClassName = "block text-sm font-medium text-slate-700 dark:text-slate-200 mb-1",
    value,
    onChange,
    min = 0,
    max = 100,
    step = 1,
    className = '',
    inputClassName = '',
    onInputKeyDown, // Destructure
    onInputBlur,    // Destructure
}) => {

    const handleIncrement = () => {
        const newValue = Math.min(value + step, max);
        onChange(newValue);
    };

    const handleDecrement = () => {
        const newValue = Math.max(value - step, min);
        onChange(newValue);
    };

    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        let numValue = parseInt(event.target.value, 10);
        if (isNaN(numValue)) {
             // Handle non-numeric input, maybe reset to min or keep current value?
             // For now, let's clamp based on min/max or fallback to min
             numValue = min; // Or potentially do nothing: onChange(value); return;
        }
        // Clamp value within min/max
        numValue = Math.max(min, Math.min(numValue, max));
        onChange(numValue);
    };

    const containerClasses = ['form-field', className].filter(Boolean).join(' ');
    const finalLabelClassName = ['form-label', labelClassName].filter(Boolean).join(' ');
    // Specific classes for the stepper input part to override/supplement .input-base
    const stepperInputSpecificClasses = 'w-12 text-center border-l-0 border-r-0 rounded-none z-10';
    const finalInputClassName = ['input-base', stepperInputSpecificClasses, inputClassName].filter(Boolean).join(' ');

    return (
        <div className={containerClasses}>
            <label htmlFor={id} className={finalLabelClassName}>
                {label}
            </label>
            <div className="flex items-center mt-1">
                <Button
                    variant="outline-slate"
                    size="sm"
                    onClick={handleDecrement} 
                    disabled={value <= min}
                    className="rounded-r-none py-1 px-2.5" // Adjusted padding and rounding
                    aria-label="Diminuir"
                > - </Button>
                <input
                    type="text" // Using text to allow empty string, parsing handles number conversion
                    id={id} 
                    value={String(value)} // Convert number to string for input value
                    onChange={handleInputChange}
                    onKeyDown={onInputKeyDown}
                    onBlur={onInputBlur}
                    className={finalInputClassName}
                    inputMode="numeric" pattern="[0-9]*"
                />
                <Button
                    variant="outline-slate"
                    size="sm"
                    onClick={handleIncrement} 
                    disabled={value >= max}
                    className="rounded-l-none py-1 px-2.5" // Adjusted padding and rounding
                    aria-label="Aumentar"
                > + </Button>
            </div>
        </div>
    );
};

export default StepperInput;


###############################################################################
### FILE: components/ui/TextareaField.tsx
###############################################################################
import React from 'react';

export interface TextareaFieldProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
  label: string;
  id: string;
}

const TextareaField: React.FC<TextareaFieldProps> = ({ label, id, className = '', ...props }) => {
  return (
    <div className="form-field">
      <label htmlFor={id} className="form-label">
        {label}
      </label>
      <textarea
        id={id}
        className={`form-input ${className}`}
        {...props}
      />
    </div>
  );
};

export default TextareaField; 


###############################################################################
### FILE: components/widgets/AutocompleteTagSelectorWidget.tsx
###############################################################################
import React from 'react';
import QuickSelectButtons from '../ui/QuickSelectButtons';
import AutocompleteInput, { AutocompleteOption as UISpecificAutocompleteOption } from '../ui/AutocompleteInput'; // Renaming to avoid conflict if any
import SelectedItemTags from '../ui/SelectedItemTags';
import { dataOptionSources, AutocompleteOption as DataAutocompleteOption } from '../../data/preAnestesiaOptions'; // Data source

// This type should match the structure defined in the schema's items (e.g., for diagnosticos)
export interface SelectedItemType {
  value: string;
  label: string;
  icd10?: string; // Example, make it flexible or specific as needed by schemas
  [key: string]: any; // Allow other properties
}

interface AutocompleteTagSelectorWidgetProps {
  id: string;
  label: string; // Main field label, e.g., "Diagnóstico(s)"
  value: SelectedItemType[]; // Current array of selected items
  onChange: (newValue: SelectedItemType[]) => void; // To update formData
  uiOptions: {
    commonOptionsKey: keyof typeof dataOptionSources; // Ensures key exists in our data
    allOptionsKey: keyof typeof dataOptionSources;
    placeholder?: string;
    quickSelectLabel?: string;
    searchLabel?: string;
    selectedLabel?: string;
  };
  required?: boolean;
  // schema_item_definition?: any; // For future use if needed
}

const AutocompleteTagSelectorWidget: React.FC<AutocompleteTagSelectorWidgetProps> = ({
  id,
  label: mainFieldLabel,
  value = [], // Default to empty array if undefined
  onChange,
  uiOptions,
  required,
}) => {

  // Type assertion as the keys are validated by `keyof typeof dataOptionSources`
  const commonDataList = dataOptionSources[uiOptions.commonOptionsKey] as DataAutocompleteOption[];
  const allDataList = dataOptionSources[uiOptions.allOptionsKey] as DataAutocompleteOption[];

  // --- Event Handlers (to be implemented) ---
  const handleQuickToggle = (selectedValue: string) => {
    // Find the full object from commonDataList or allDataList
    const itemToAddOrRemove = [...commonDataList, ...allDataList].find(opt => opt.value === selectedValue);
    if (!itemToAddOrRemove) return;

    const existingIndex = value.findIndex(item => item.value === selectedValue);
    let newValueArray;
    if (existingIndex > -1) {
      newValueArray = value.filter(item => item.value !== selectedValue); // Remove
    } else {
      // Ensure we add an object matching SelectedItemType structure
      const newItem: SelectedItemType = { ...itemToAddOrRemove }; 
      newValueArray = [...value, newItem]; // Add
    }
    onChange(newValueArray);
  };

  const handleAutocompleteSelect = (selectedOption: UISpecificAutocompleteOption | null) => {
    if (selectedOption && !value.some(item => item.value === selectedOption.value)) {
       // Ensure we add an object matching SelectedItemType structure
      const newItem: SelectedItemType = { ...selectedOption }; 
      onChange([...value, newItem]);
    }
  };

  const handleTagRemove = (valueToRemove: string) => {
    onChange(value.filter(item => item.value !== valueToRemove));
  };

  return (
    <fieldset className="mb-4 p-4 border border-slate-200 dark:border-slate-600 rounded-md bg-white dark:bg-slate-800 space-y-4">
      <legend className="text-base font-semibold text-slate-800 dark:text-slate-100 px-2 -mb-2">
        {mainFieldLabel}
        {required && <span className="text-red-500 ml-1">*</span>}
      </legend>

      <div className='mt-2'> {/* Added mt-2 for spacing from legend */} 
        <label className='form-label'>{uiOptions.quickSelectLabel || 'Quick Select:'}</label>
        <QuickSelectButtons
          options={commonDataList.map(opt => ({ value: opt.value, label: opt.label }))} // Adapt to QuickSelectOption if needed
          selectedValues={value.map(item => item.value)}
          onToggle={handleQuickToggle}
        />
      </div>

      <div>
        <AutocompleteInput
          id={`${id}-autocomplete`}
          label={uiOptions.searchLabel || 'Search:'}
          options={allDataList} // AutocompleteInput expects AutocompleteOption[]
          onSelect={handleAutocompleteSelect}
          placeholder={uiOptions.placeholder}
        />
      </div>

      <div>
        <label className='form-label'>{uiOptions.selectedLabel || 'Selected:'}</label>
        <SelectedItemTags
          items={value} // SelectedItemTags expects SelectedDiagnosis[] which should be compatible with SelectedItemType
          onRemove={handleTagRemove}
          noItemsText="-"
        />
      </div>
    </fieldset>
  );
};

export default AutocompleteTagSelectorWidget; 


###############################################################################
### FILE: components/widgets/DrugSectionWidget.tsx
###############################################################################
import React from 'react';
import DrugInputField from '../ui/DrugInputField';
import { intraOpDataSources, DrugInfo } from '../../data/intraoperatoriaOptions';

export interface DrugSectionValue {
  selectedDrugs: { [drugId: string]: boolean };
  drugValues: { [drugId: string]: string | number | null };
}

interface DrugSectionWidgetProps {
  id: string; // Base ID for the section
  value: DrugSectionValue;
  onChange: (newValue: DrugSectionValue) => void;
  uiOptions: {
    drugListKey: keyof typeof intraOpDataSources;
    sectionTitle: string;
  };
  required?: boolean; // For the fieldset legend, if needed
}

const DrugSectionWidget: React.FC<DrugSectionWidgetProps> = ({
  id,
  value, // Expected to be { selectedDrugs: {}, drugValues: {} }
  onChange,
  uiOptions,
  required,
}) => {
  const { drugListKey, sectionTitle } = uiOptions;
  
  // Ensure value and its properties are initialized if undefined
  const currentSelectedDrugs = value?.selectedDrugs || {};
  const currentDrugValues = value?.drugValues || {};

  // Type assertion is okay here because drugListKey should be validated by its type
  const drugList = intraOpDataSources[drugListKey] as DrugInfo[] | undefined;

  if (!drugList) {
    return <p>Error: Drug list not found for key: {drugListKey}</p>;
  }

  const handleDrugSelectToggle = (drugId: string) => {
    const newSelectedDrugs = {
      ...value.selectedDrugs,
      [drugId]: !value.selectedDrugs[drugId]
    };

    const newDrugValues = { ...value.drugValues };
    if (!newSelectedDrugs[drugId]) {
      // Remove value if drug is deselected
      delete newDrugValues[drugId];
    }

    onChange({
      selectedDrugs: newSelectedDrugs,
      drugValues: newDrugValues
    });
  };

  const handleDrugValueChange = (drugId: string, newValue: string | number) => {
    // The DrugInputField passes string for steppers, or event for others.
    // We assume DrugInputField's onValueChange has already processed the event to a simple value if necessary.
    const processedValue = typeof newValue === 'object' && newValue !== null && 'target' in newValue 
                         ? (newValue as React.ChangeEvent<HTMLInputElement>).target.value 
                         : newValue;

    const newDrugValues = { ...currentDrugValues, [drugId]: processedValue };
    onChange({ selectedDrugs: currentSelectedDrugs, drugValues: newDrugValues });
  };

  return (
    <fieldset className="border border-slate-200 dark:border-slate-600 p-4 rounded-md bg-white dark:bg-slate-800 mb-6" id={id}>
      <legend className="text-base font-semibold text-slate-800 dark:text-slate-100 px-2">
        {sectionTitle}
        {required && <span className="text-red-500 ml-1">*</span>} 
      </legend>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-3 mt-2">
        {drugList.map((drug) => (
          <DrugInputField
            key={drug.id}
            drugName={drug.name}
            drugId={drug.id}
            unit={drug.unit}
            isSelected={currentSelectedDrugs[drug.id] || false}
            value={String(currentDrugValues[drug.id] || '')} // Ensure value is string for DrugInputField
            onSelectToggle={() => handleDrugSelectToggle(drug.id)}
            onValueChange={(eventOrValue) => handleDrugValueChange(drug.id, eventOrValue as string | number)} // Cast as DrugInputField expects string for stepper
            inputType={drug.inputType}
            colorClass={drug.colorClass}
          />
        ))}
      </div>
    </fieldset>
  );
};

export default DrugSectionWidget; 


###############################################################################
### FILE: data/intraoperatoriaOptions.ts
###############################################################################
// frontend/src/data/intraoperatoriaOptions.ts

// Option Info Interface (Generic)
export interface OptionInfo { value: string; label: string; }

// Drug Info Interface
export interface DrugInfo {
    name: string;
    id: string;
    unit: string;
    inputType?: 'text' | 'number' | 'stepper';
    colorClass?: string; 
}

// --- Options & Data Structures --- (Copied from Intraoperatoria.tsx)
export const procedimentoOptions: OptionInfo[] = [ { value: 'broncoscopia_flexivel', label: 'Broncoscopia flexível' }, { value: 'broncoscopia_rigida', label: 'Broncoscopia rígida' }, { value: 'traqueoscopia', label: 'Traqueoscopia' }, { value: 'dilatacao_traqueal', label: 'Dilatação Traqueal' }, { value: 'traqueoplastia', label: 'Traqueoplastia' }, ];
export const anestesiaOptions: OptionInfo[] = [ { value: 'geral', label: 'Geral' }, { value: 'sedacao_profunda', label: 'Sedação Profunda' }, ];

// --- Drug Definitions with Color Placeholders ---
const drugColorClasses = {
    opioid: 'bg-blue-500',
    benzo: 'bg-orange-500',
    induction: 'bg-yellow-400',
    localAnesthetic: 'bg-gray-500',
    volatile: 'bg-purple-500',
    nmba: 'bg-red-500',
    alpha2Agonist: 'bg-green-500',
    other: 'bg-slate-500',
    antiemetic: 'bg-teal-500',
    analgesic: 'bg-pink-500',
    bronchodilator: 'bg-sky-500',
    steroid: 'bg-amber-700',
    electrolyte: 'bg-indigo-500',
};

export const inductionDrugsList: DrugInfo[] = [
  { name: 'Lidocaína', id: 'lido', unit: 'mg', colorClass: drugColorClasses.localAnesthetic },
  { name: 'Fentanil', id: 'fenta', unit: 'mcg', colorClass: drugColorClasses.opioid },
  { name: 'Sufentanil', id: 'sufenta', unit: 'mcg', colorClass: drugColorClasses.opioid },
  { name: 'Alfentanil', id: 'alfenta', unit: 'mcg', colorClass: drugColorClasses.opioid },
  { name: 'Dexmedetomidina', id: 'dexme_ind', unit: 'mcg', colorClass: drugColorClasses.alpha2Agonist },
  { name: 'Cetamina', id: 'keta', unit: 'mg', colorClass: drugColorClasses.induction },
  { name: 'Midazolam', id: 'mida', unit: 'mg', colorClass: drugColorClasses.benzo },
  { name: 'Propofol', id: 'propo_ind', unit: 'mg', colorClass: drugColorClasses.induction },
  { name: 'Etomidato', id: 'etomi', unit: 'mg', colorClass: drugColorClasses.induction },
  { name: 'Sevoflurano', id: 'sevo_ind', unit: '%', inputType: 'text', colorClass: drugColorClasses.volatile },
];
export const maintenanceDrugsList: DrugInfo[] = [
    { name: 'Remifentanil', id: 'remi', unit: 'mcg/kg/min', colorClass: drugColorClasses.opioid },
    { name: 'Propofol', id: 'propo_maint', unit: 'mcg/kg/min', colorClass: drugColorClasses.induction },
    { name: 'Dexmedetomidina', id: 'dexme_maint', unit: 'mcg/kg/h', colorClass: drugColorClasses.alpha2Agonist },
    { name: 'Sevoflurano', id: 'sevo_maint', unit: '%', inputType: 'text', colorClass: drugColorClasses.volatile },
];
export const adjuvantDrugsList: DrugInfo[] = [
    { name: 'Clonidina', id: 'clon', unit: 'mcg', colorClass: drugColorClasses.alpha2Agonist },
    { name: 'Sulfato de Magnésio', id: 'mgso4', unit: 'mg', colorClass: drugColorClasses.electrolyte },
];
export const symptomaticDrugsList: DrugInfo[] = [
    { name: 'Dipirona', id: 'dipi', unit: 'mg', colorClass: drugColorClasses.analgesic },
    { name: 'Ondansentrona', id: 'onda', unit: 'mg', colorClass: drugColorClasses.antiemetic },
    { name: 'Salbutamol', id: 'salbu', unit: 'puffs', inputType: 'stepper', colorClass: drugColorClasses.bronchodilator },
    { name: 'Dexametasona', id: 'dexa', unit: 'mg', colorClass: drugColorClasses.steroid },
];

// Other options...
export const oxigenioOptions: OptionInfo[] = [ { value: 'cateter_nasal', label: 'Cateter nasal'}, { value: 'sonda_aspiracao_periglotica', label: 'Sonda de aspiração periglótica'}, ];
export const ventilatorioOptions: OptionInfo[] = [ { value: 'mascara_laringea', label: 'Máscara laríngea'}, { value: 'tubo_orotraqueal', label: 'Tubo orotraqueal'}, ];
export const dessaturacaoOptions: OptionInfo[] = [ { value: 'dessaturacao_85_92', label: 'Dessaturação (85-92%)'}, { value: 'dessaturacao_75_85', label: 'Dessaturação (75-85%)'}, { value: 'dessaturacao_lt_70', label: 'Dessaturação (<70%)'}, ];
export const outrasIntercorrenciasOptions: OptionInfo[] = [ { value: 'broncoespasmo', label: 'Broncoespasmo'}, { value: 'laringoespasmo', label: 'Laringoespasmo'}, { value: 'sangramento', label: 'Sangramento'}, { value: 'reflexo_tosse_nao_abolido', label: 'Reflexo de tosse não abolido'}, ];

// For easier access in the widget
export const intraOpDataSources = {
    procedimentoOptions,
    anestesiaOptions,
    inductionDrugsList,
    maintenanceDrugsList,
    adjuvantDrugsList,
    symptomaticDrugsList,
    oxigenioOptions,
    ventilatorioOptions,
    dessaturacaoOptions,
    outrasIntercorrenciasOptions
}; 


###############################################################################
### FILE: data/preAnestesiaOptions.ts
###############################################################################
export interface AutocompleteOption {
  value: string;
  label: string;
  [key: string]: any; // Allow other properties like icd10
}

// --- Diagnoses Data ---
export const commonDiagnoses: AutocompleteOption[] = [
  { value: 'laringomalacia', label: 'Laringomalácia', icd10: 'J38.5' },
  { value: 'estenose_subglotica_congenita', label: 'Estenose subglótica congênita', icd10: 'Q31.1' },
  { value: 'fistula_traqueoesofagica', label: 'Fístula traqueoesofágica', icd10: 'Q39.2' },
  { value: 'cleft_laringeo', label: 'Cleft laríngeo', icd10: 'Q31.8' },
  { value: 'paralisia_bilateral_cordas_vocais', label: 'Paralisia bilateral de cordas vocais', icd10: 'J38.0' },
];
export const allDiagnosesSample: AutocompleteOption[] = [
  ...commonDiagnoses,
  { value: 'estenose_traqueal_pos_intubacao', label: 'Estenose traqueal pós intubação', icd10: 'J95.5' }, 
  { value: 'colapso_traqueal_congenito', label: 'Colapso traqueal congênito', icd10: 'Q32.1' }, 
  { value: 'fibroma_epifaringeo', label: 'Fibroma epifaringeo', icd10: 'D10.6' }, 
  { value: 'estreitamento_arvore_bronquica', label: 'Estreitamento da árvore brônquica', icd10: 'Q32.4' }, 
  { value: 'anel_vascular', label: 'Anel vascular', icd10: 'Q25.7' }, 
  { value: 'cisto_broncogenico', label: 'Cisto broncogênico', icd10: 'Q32.4' }, 
  { value: 'cisto_paravalecular', label: 'Cisto paravalecular', icd10: 'J38.6' }, 
  { value: 'fistula_traqueopleural', label: 'Fístula traqueopleural', icd10: 'J86.0' }, 
  { value: 'papilomatose_respiratoria_recorrente', label: 'Papilomatose respiratória recorrente', icd10: 'D14.1' }, 
  { value: 'hemangioma_subglotico', label: 'Hemangioma subglótico', icd10: 'D18.03' }, 
  { value: 'corpo_estranho', label: 'Corpo estranho', icd10: 'T17._' },
];

// --- Comorbidities Data ---
export const commonComorbidades: AutocompleteOption[] = [
    { value: 'prematuridade', label: 'Prematuridade' }, 
    { value: 'cardiopatia_congenita', label: 'Cardiopatia congênita' },
    { value: 'asma', label: 'Asma' }, 
    { value: 'sindrome_pierre_robin', label: 'Síndrome de Pierre Robin'},
    { value: 'doenca_neurologica', label: 'Doença Neurológica'},
];
export const allComorbidadesSample: AutocompleteOption[] = [
    ...commonComorbidades,
    { value: 'fibrose_cistica', label: 'Fibrose cística'}, 
    { value: 'tuberculose', label: 'Tuberculose'},
    { value: 'malformacao_pulmonar', label: 'Malformação pulmonar'}, 
    { value: 'imunodeficiencia', label: 'Imunodeficiência'},
    { value: 'disturbio_metabolico', label: 'Distúrbio metabólico'}
];

// --- Queixas Data ---
export const commonQueixas: AutocompleteOption[] = [
    { value: 'tosse_cronica', label: 'Tosse crônica'}, 
    { value: 'estridor', label: 'Estridor'},
    { value: 'infeccoes_respiratorias_recorrentes', label: 'Infecções respiratórias recorrentes'},
    { value: 'sibilancia', label: 'Sibilância'}, 
    { value: 'sangramento', label: 'Sangramento'},
];
export const allQueixasSample: AutocompleteOption[] = [
    ...commonQueixas, 
    { value: 'atelectasia', label: 'Atelectasia'}
];

// For easier access in the widget
export const dataOptionSources = {
    commonDiagnoses,
    allDiagnosesSample,
    commonComorbidades,
    allComorbidadesSample,
    commonQueixas,
    allQueixasSample
}; 


###############################################################################
### FILE: index.css
###############################################################################
/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Global styles */
* {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: #f1f5f9;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: #cbd5e1;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #94a3b8;
}

.dark ::-webkit-scrollbar-track {
  background: #1e293b;
}

.dark ::-webkit-scrollbar-thumb {
  background: #475569;
}

.dark ::-webkit-scrollbar-thumb:hover {
  background: #64748b;
}

/* Hide scrollbar utility */
.scrollbar-hide {
  -ms-overflow-style: none;
  scrollbar-width: none;
}
.scrollbar-hide::-webkit-scrollbar {
  display: none;
}

/* Layout heights */
.sidebar-header-height {
  height: 72px;
}

.header-height {
  height: 72px;
}

/* Text gradient */
.text-gradient {
  background: linear-gradient(135deg, #3b82f6, #8b5cf6, #ec4899);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.text-gradient-cool {
  background: linear-gradient(135deg, #3b82f6, #06b6d4, #10b981);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.text-gradient-warm {
  background: linear-gradient(135deg, #f59e0b, #ef4444, #ec4899);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

/* Context navigation styling */
.context-nav-item {
  @apply flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium cursor-pointer transition-all duration-200 whitespace-nowrap;
  @apply text-slate-600 dark:text-slate-300 hover:text-slate-800 dark:hover:text-slate-100;
  @apply hover:bg-slate-100/50 dark:hover:bg-slate-700/30;
  min-width: fit-content;
}

.context-nav-item.active {
  @apply text-blue-700 dark:text-blue-300 bg-blue-50/80 dark:bg-blue-900/30;
  @apply border-b-2 border-blue-500 dark:border-blue-400;
  @apply shadow-sm;
}

.context-nav-item .icon {
  @apply w-4 h-4 flex-shrink-0;
}

/* Animations */
@keyframes fade-in {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes pulse-glow {
  0%, 100% {
    transform: scale(1);
    filter: brightness(1);
  }
  50% {
    transform: scale(1.05);
    filter: brightness(1.1);
  }
}

.animation-fade-in {
  animation: fade-in 0.5s ease-out;
}

.animate-fade-in {
  animation: fade-in 0.3s ease-out;
}

.animate-pulse-glow {
  animation: pulse-glow 2s ease-in-out infinite;
}

/* Icon-text color matching utilities */
.icon-text-match .icon {
  @apply text-current;
}

.icon-text-colorful .icon {
  @apply text-blue-500 dark:text-blue-400;
}

.icon-text-colorful.variant-purple .icon {
  @apply text-purple-500 dark:text-purple-400;
}

.icon-text-colorful.variant-emerald .icon {
  @apply text-emerald-500 dark:text-emerald-400;
}

.icon-text-colorful.variant-slate .icon {
  @apply text-slate-500 dark:text-slate-400;
}

.icon-text-colorful.variant-orange .icon {
  @apply text-orange-500 dark:text-orange-400;
}

.icon-text-colorful.variant-rose .icon {
  @apply text-rose-500 dark:text-rose-400;
}

.icon-text-colorful.variant-teal .icon {
  @apply text-teal-500 dark:text-teal-400;
}

.icon-text-colorful.variant-indigo .icon {
  @apply text-indigo-500 dark:text-indigo-400;
}

/* Hover effects */
.hover-lift {
  @apply transition-all duration-200 hover:scale-105 hover:shadow-lg;
}

.hover-glow {
  @apply transition-all duration-200 hover:shadow-xl hover:shadow-blue-500/25;
}

/* Card styles */
.card {
  @apply bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-xl shadow-sm;
}

.card-hover {
  @apply hover:shadow-md hover:border-slate-300 dark:hover:border-slate-600 transition-all duration-200;
}

.card-enhanced {
  @apply bg-white dark:bg-slate-800/90 border border-slate-200/60 dark:border-slate-700/60 shadow-lg;
  @apply backdrop-blur-sm;
  background-image: linear-gradient(135deg, rgba(255,255,255,0.9) 0%, rgba(248,250,252,0.9) 100%);
}

.dark .card-enhanced {
  background-image: linear-gradient(135deg, rgba(30,41,59,0.9) 0%, rgba(51,65,85,0.9) 100%);
}

.card-colorful {
  @apply relative bg-white dark:bg-slate-800/90 border border-slate-200/60 dark:border-slate-700/60 shadow-lg overflow-hidden;
  @apply backdrop-blur-sm;
}

.card-colorful::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, 
    rgba(59,130,246,0.05) 0%, 
    rgba(147,51,234,0.05) 35%, 
    rgba(236,72,153,0.05) 70%, 
    rgba(59,130,246,0.05) 100%);
  z-index: 0;
}

.dark .card-colorful::before {
  background: linear-gradient(135deg, 
    rgba(59,130,246,0.1) 0%, 
    rgba(147,51,234,0.1) 35%, 
    rgba(236,72,153,0.1) 70%, 
    rgba(59,130,246,0.1) 100%);
}

/* Button styles */
.btn-primary {
  @apply bg-gradient-to-r from-blue-500 to-indigo-500 hover:from-blue-600 hover:to-indigo-600 text-white font-medium py-2 px-4 rounded-lg shadow-sm hover:shadow-md transition-all duration-200;
}

.btn-secondary {
  @apply bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-200 hover:bg-slate-200 dark:hover:bg-slate-600 font-medium py-2 px-4 rounded-lg transition-all duration-200;
}

.btn-ghost {
  @apply text-slate-600 dark:text-slate-300 hover:text-slate-800 dark:hover:text-slate-100 hover:bg-slate-100 dark:hover:bg-slate-700 font-medium py-2 px-4 rounded-lg transition-all duration-200;
}

/* Form styles */
.form-input {
  @apply block w-full px-3 py-2 bg-white dark:bg-slate-800 border border-slate-300 dark:border-slate-600 rounded-lg text-sm placeholder-slate-400 dark:placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent;
}

.form-label {
  @apply block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1;
}

/* Focus styles */
.focus-ring {
  @apply focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:ring-offset-2 focus:ring-offset-white dark:focus:ring-offset-slate-800;
}

/* Status indicators */
.status-dot {
  @apply w-2 h-2 rounded-full;
}

.status-online {
  @apply bg-green-500;
}

.status-offline {
  @apply bg-slate-400;
}

.status-away {
  @apply bg-yellow-500;
}

.status-busy {
  @apply bg-red-500;
}

/* Responsive utilities */
@media (max-width: 1024px) {
  .sidebar-collapsed {
    width: 4rem;
  }
  
  .sidebar-hidden {
    width: 0;
    overflow: hidden;
  }
}


###############################################################################
### FILE: main.tsx
###############################################################################
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </StrictMode>,
)



###############################################################################
### FILE: pages/CreateProjectPage.tsx
###############################################################################
import React, { useState } from 'react';
import SectionCard from '../components/ui/SectionCard';
import { Link, useNavigate } from 'react-router-dom';
import Button from '../components/ui/Button';
import { FaArrowLeft, FaPlus } from 'react-icons/fa';
import InputField from '../components/ui/InputField';
import TextareaField from '../components/ui/TextareaField';
import useProjectStore from '../stores/projectStore';
import useAuthStore from '../stores/authStore';

const CreateProjectPage: React.FC = () => {
  const navigate = useNavigate();
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [goals, setGoals] = useState('');
  const [error, setError] = useState('');

  const addProject = useProjectStore(state => state.addProject);
  const setActiveProject = useProjectStore(state => state.setActiveProject);
  const user = useAuthStore(state => state.user);

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    if (!name) {
      setError('Project name is required.');
      return;
    }
    if (!user) {
      setError('You must be logged in to create a project.');
      return;
    }
    setError('');

    const newProject = {
      id: `proj_${new Date().getTime()}`,
      name,
      description,
      goals,
      members: [{ userId: user.id, roles: ['ProjectLead', 'Researcher'] }],
    };

    addProject(newProject);
    setActiveProject(newProject.id);
    navigate(`/project/${newProject.id}`);
  };

  return (
    <div className="p-4 sm:p-6 max-w-3xl mx-auto">
      <div className="mb-4">
        <Button 
          variant="ghost" 
          size="sm" 
          asChild
          className="text-slate-600 hover:text-slate-800 dark:text-slate-400 dark:hover:text-slate-200"
        >
          <Link to="/dashboard">
            <FaArrowLeft className="mr-2" />
            Back to Dashboard
          </Link>
        </Button>
      </div>
      <SectionCard title="Create New Project">
        <form onSubmit={handleSubmit} className="space-y-6">
          <InputField
            id="projectName"
            label="Project Name"
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="e.g., ERAS Protocol for Pediatric Thoracic Surgery"
            required
          />
          <TextareaField
            id="projectDescription"
            label="Project Description"
            value={description}
            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setDescription(e.target.value)}
            placeholder="A brief summary of the project's main purpose and scope."
            rows={4}
          />
          <TextareaField
            id="projectGoals"
            label="Project Goals"
            value={goals}
            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setGoals(e.target.value)}
            placeholder="List the primary objectives and aims of this research project."
            rows={4}
          />
          {error && <p className="text-sm text-red-500 dark:text-red-400">{error}</p>}
          <div className="flex justify-end pt-4 border-t border-slate-200 dark:border-slate-700">
            <Button 
              type="submit"
              variant="primary" 
              iconLeft={<FaPlus />}
            >
              Create Project
            </Button>
          </div>
        </form>
      </SectionCard>
    </div>
  );
};

export default CreateProjectPage; 


###############################################################################
### FILE: pages/DashboardPage.tsx
###############################################################################
import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import useProjectStore, { Project } from '../stores/projectStore';
import useAuthStore from '../stores/authStore';
import {
  PiBriefcaseDuotone,
  PiArrowSquareOutDuotone,
  PiBellSimpleRingingDuotone,
  PiListChecksDuotone,
  PiFileTextDuotone,
  PiCalendarCheckDuotone
} from 'react-icons/pi';
import Button from '../components/ui/Button';
import DashboardGreetingCard from '../components/ui/DashboardGreetingCard';

const DashboardPage: React.FC = () => {
  const navigate = useNavigate();
  const {
    availableProjects,
    activeProjectId,
    fetchAvailableProjects,
    setActiveProject,
    isLoading: projectsLoading,
    error: projectsError,
  } = useProjectStore();
  
  const { user, isAuthenticated } = useAuthStore();

  useEffect(() => {
    if (isAuthenticated) {
      fetchAvailableProjects();
    }
  }, [fetchAvailableProjects, isAuthenticated]);

  const handleSelectProject = (project: Project) => {
    setActiveProject(project.id);
    navigate(`/project/${project.id}`);
  };

  const handleCreateNewProject = () => {
    navigate('/dashboard/create-project');
  };

  const handleViewProfile = () => {
    // Placeholder: Navigation to a full profile page will be implemented later
    alert('Navigate to full profile page - TBD');
  };

  const getUserRolesForProject = (project: Project): string[] => {
    if (!user) return [];
    const memberInfo = project.members.find(m => m.userId === user.id);
    return memberInfo ? memberInfo.roles : [];
  };

  if (projectsLoading && !availableProjects.length) {
    return <div className="p-6 text-center"><p className="text-slate-600 dark:text-slate-400">Loading dashboard...</p></div>;
  }

  if (projectsError) {
    return <div className="p-6 text-center text-red-500 dark:text-red-400">Error loading projects: {projectsError}</div>;
  }

  return (
    <div className="p-4 sm:p-6 space-y-8 bg-gradient-to-br from-slate-50 via-blue-50/30 to-purple-50/30 dark:from-slate-900 dark:via-slate-900 dark:to-slate-900 min-h-full flex flex-col max-w-6xl mx-auto w-full">
      
      <DashboardGreetingCard 
        onCreateNewProject={handleCreateNewProject} 
        onViewProfile={handleViewProfile} 
      />

      <div className="flex-grow grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Column 1: My Projects (Scrollable) */}
        <section className="lg:col-span-2 flex flex-col card-enhanced rounded-xl p-0 overflow-hidden shadow-xl">
          <h2 className="text-2xl font-semibold text-slate-800 dark:text-slate-200 icon-text-colorful flex items-center p-5 pb-3 border-b border-slate-200 dark:border-slate-700/80 shrink-0">
            <PiBriefcaseDuotone className="icon mr-3 text-3xl animate-pulse-glow" /> My Projects
          </h2>
          {availableProjects.filter(p => p.members.some(m => m.userId === user?.id)).length > 0 ? (
            <div className="overflow-y-auto flex-grow p-5 space-y-3">
              {availableProjects.filter(p => p.members.some(m => m.userId === user?.id)).map((project) => {
                const userRolesInProject = getUserRolesForProject(project);
                const isProjectActive = project.id === activeProjectId;
                return (
                  <div 
                    key={project.id} 
                    className={`p-4 rounded-xl transition-all duration-300 cursor-pointer border dark:border-slate-700 
                                bg-gradient-to-r from-white via-slate-50/50 to-white dark:from-slate-800 dark:via-slate-700/50 dark:to-slate-800 
                                hover:shadow-lg hover:scale-[1.02] dark:hover:bg-slate-700 
                                ${isProjectActive 
                                  ? 'ring-2 ring-blue-500 dark:ring-blue-400 shadow-lg shadow-blue-500/25 dark:shadow-blue-400/20' 
                                  : 'border-slate-200 dark:border-slate-700 hover:border-blue-400/50 dark:hover:border-blue-500/50'}
                              `}
                    onClick={() => handleSelectProject(project)}
                  >
                    <div className="flex flex-col sm:flex-row justify-between items-start gap-2">
                      <div className="flex-1 min-w-0">
                        <h3 className="text-md font-semibold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-0.5 truncate">{project.name}</h3>
                        <p className="text-xs text-slate-500 dark:text-slate-400 mb-1 line-clamp-2 leading-relaxed">
                          {project.description || 'No description available.'}
                        </p>
                        <div className="flex items-center space-x-4 mt-2 text-xs text-slate-500 dark:text-slate-400">
                          {userRolesInProject.length > 0 && (
                              <div className="flex items-center">
                                  Your role(s): <span className="font-medium text-emerald-600 dark:text-emerald-400 ml-1">{userRolesInProject.join(', ')}</span>
                              </div>
                          )}
                        </div>
                        <div className="mt-2 pt-2 border-t border-slate-200 dark:border-slate-700/60 flex flex-col sm:flex-row sm:items-center sm:space-x-4 space-y-1 sm:space-y-0 text-xs">
                          <div className="flex items-center text-slate-600 dark:text-slate-300 icon-text-colorful variant-orange">
                            <PiFileTextDuotone className="icon mr-1.5 text-sm" />
                            <span>3 Formulários Pendentes (Placeholder)</span>
                          </div>
                          <div className="flex items-center text-slate-600 dark:text-slate-300 icon-text-colorful variant-emerald">
                            <PiCalendarCheckDuotone className="icon mr-1.5 text-sm" />
                            <span>2 Próximos Follow-ups (Placeholder)</span>
                          </div>
                        </div>
                      </div>
                      <Button 
                        variant="outline-primary" 
                        size="sm" 
                        onClick={(e) => { e.stopPropagation(); handleSelectProject(project); }} 
                        iconRight={<PiArrowSquareOutDuotone/>}
                        className="shrink-0 mt-1 sm:mt-0 py-1 px-2 text-xs hover:shadow-md transition-all"
                      >
                        Details
                      </Button>
                    </div>
                  </div>
                );
              })}
            </div>
          ) : (
            <div className="flex-grow flex flex-col items-center justify-center p-6 text-center">
              <PiBriefcaseDuotone className="text-4xl text-slate-400 dark:text-slate-500 mx-auto mb-3 animate-pulse-glow" />
              <p className="text-slate-500 dark:text-slate-400">No projects found, or you are not yet a member of any project.</p>
              <p className="text-slate-500 dark:text-slate-400 mt-1 text-sm">Try creating a new one if you have permissions!</p>
            </div>
          )}
        </section>

        {/* Column 2: News & Updates, then Quick Tasks */}
        <div className="lg:col-span-1 flex flex-col gap-6">
          <section className="card-colorful p-6 rounded-xl shadow-lg">
            <h2 className="text-xl font-semibold text-purple-600 dark:text-purple-400 icon-text-colorful variant-purple flex items-center mb-4 relative z-10">
              <PiBellSimpleRingingDuotone className="icon mr-3 text-2xl" /> News & Updates
            </h2>
            <ul className="space-y-3 text-sm relative z-10">
              <li className="text-slate-600 dark:text-slate-300">Platform Update v1.2 Released! <span className="text-xs text-slate-400 dark:text-slate-500">(Placeholder)</span></li>
              <li className="text-slate-600 dark:text-slate-300">Scheduled maintenance on Sunday @ 2 AM. <span className="text-xs text-slate-400 dark:text-slate-500">(Placeholder)</span></li>
            </ul>
          </section>

          <section className="card-colorful p-6 rounded-xl shadow-lg">
            <h2 className="text-xl font-semibold text-emerald-600 dark:text-emerald-400 icon-text-colorful variant-emerald flex items-center mb-4 relative z-10">
              <PiListChecksDuotone className="icon mr-3 text-2xl" /> Quick Tasks
            </h2>
            <ul className="space-y-2 text-sm relative z-10">
              <li className="text-slate-600 dark:text-slate-300">No urgent tasks at the moment. (Placeholder)</li>
            </ul>
          </section>
        </div>
      </div>
    </div>
  );
};

export default DashboardPage; 


###############################################################################
### FILE: pages/DataSubmissionPage.tsx
###############################################################################
import React, { useState, useEffect, useCallback } from 'react';
import DynamicFormRenderer from '../components/forms/DynamicFormRenderer';
import InputField from '../components/ui/InputField';
import SectionCard from '../components/ui/SectionCard';
import Button from '../components/ui/Button';
import { FaSpinner, FaExclamationTriangle, FaArrowLeft, FaArrowRight, FaSave, FaPaperPlane, FaUndo, FaRedoAlt, FaUserEdit, FaEye, FaFileMedical, FaCheckCircle, FaEllipsisH } from 'react-icons/fa';
import useSubmissionStore, { PatientInputData, FormDefinition, clearPersistedSubmission } from '../stores/submissionStore';

// --- Interfaces & Mock Data (some might be redundant if store types are comprehensive) ---
// Use StorePatientInputData and StoreFormDefinition directly where possible

// Mock data for a sequence of forms for a patient encounter - this could come from project config
const MOCK_FORM_SEQUENCE: FormDefinition[] = [
  { key: 'preanest', name: 'Formulário de Pré-Anestesia', version: '1.0.3', schemaPath: '../schemas/preAnestesia.schema.json', uiSchemaPath: '../schemas/preAnestesia.uiSchema.json' },
  { key: 'intraop', name: 'Formulário Intraoperatório', version: '1.1.1', schemaPath: '../schemas/intraoperatoria.schema.json', uiSchemaPath: '../schemas/intraoperatoria.uiSchema.json' },
  { key: 'recuperacao', name: 'Formulário de Recuperação Pós-Anestésica', version: '1.2.2', schemaPath: '../schemas/recuperacaoPosAnestesica.schema.json', uiSchemaPath: '../schemas/recuperacaoPosAnestesica.uiSchema.json' },
];

// Simulate fetching this sequence (e.g., based on project or protocol)
const fetchFormSequenceForEncounter = (): Promise<FormDefinition[]> => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(MOCK_FORM_SEQUENCE);
    }, 300);
  });
};

type ProcessStep =
  | 'initialPatientInput'
  | 'loadingFormSequence' // Combines previous resume and initial loading indication
  | 'loadingFormSchema'
  | 'fillingFormInSequence'
  | 'reviewAndSubmit'
  | 'submissionError';

// Helper component for Stepper UI
const SubmissionStepper: React.FC<{
  currentOverallStep: ProcessStep;
  currentFormIndexInSequence: number; // from store
  formSequence: FormDefinition[]; // from store
  patientInputComplete: boolean; // derived from localPatientInput
}> = ({ currentOverallStep, currentFormIndexInSequence, formSequence, patientInputComplete }) => {
  
  const getStepStatus = (
    stepKey: string, 
    currentKey: string 
  ): 'completed' | 'current' | 'upcoming' => {
    const stepsOrder = ['patientInput', ...(formSequence || []).map(f => f.key), 'review'];
    const currentIndex = stepsOrder.indexOf(currentKey);
    const stepIndex = stepsOrder.indexOf(stepKey);

    if (stepIndex < currentIndex) return 'completed';
    if (stepIndex === currentIndex) return 'current';
    return 'upcoming';
  };

  let activeDisplayStepKey = 'patientInput';
  if (currentOverallStep === 'fillingFormInSequence' && formSequence && formSequence.length > 0 && formSequence[currentFormIndexInSequence]) {
    activeDisplayStepKey = formSequence[currentFormIndexInSequence].key;
  } else if (currentOverallStep === 'reviewAndSubmit') {
    activeDisplayStepKey = 'review';
  } else if (
    currentOverallStep === 'initialPatientInput' || 
    (currentOverallStep === 'loadingFormSequence' && !patientInputComplete) || 
    (currentOverallStep === 'loadingFormSchema' && !patientInputComplete && (!formSequence || formSequence.length === 0))
  ) {
    activeDisplayStepKey = 'patientInput';
  }

  const stepsToDisplay = [
    { key: 'patientInput', label: 'Patient Info & Consent', icon: FaUserEdit },
    ...(formSequence || []).map(formDef => ({ key: formDef.key, label: formDef.name, icon: FaFileMedical })),
    { key: 'review', label: 'Review & Submit', icon: FaEye }
  ];

  const getListItemClassName = (status: 'completed' | 'current' | 'upcoming', isLastStep: boolean): string => {
    let baseClasses = 'flex md:w-full items-center';
    if (status === 'current') baseClasses += ' text-blue-600 dark:text-blue-400';
    if (status === 'completed') baseClasses += ' text-green-600 dark:text-green-400';
    if (!isLastStep) {
      baseClasses += " sm:after:content-[''] after:w-full after:h-1 after:border-b after:border-slate-200 dark:after:border-slate-700 after:border-1 sm:after:inline-block after:mx-2 xl:after:mx-4";
    }
    return baseClasses;
  };

  const getIconContainerClassName = (isLastStep: boolean): string => {
    let baseClasses = 'flex items-center shrink-0';
    if (!isLastStep) {
      baseClasses += ' sm:after:hidden';
    }
    return baseClasses;
  };

  return (
    <div className="mb-8 p-3 bg-slate-50 dark:bg-slate-800 rounded-lg shadow print:hidden">
      <ol className="flex items-center w-full text-sm font-medium text-center text-slate-500 dark:text-slate-400 sm:text-base">
        {stepsToDisplay.map((step, index) => {
          const status = getStepStatus(step.key, activeDisplayStepKey);
          const IconComponent = step.icon;
          const isLastStep = index === stepsToDisplay.length - 1;

          return (
            <li
              key={step.key}
              className={getListItemClassName(status, isLastStep)}
            >
              <span className={getIconContainerClassName(isLastStep)}>
                {status === 'completed' ? (
                  <FaCheckCircle className="w-4 h-4 sm:w-5 sm:h-5 mr-1.5 sm:mr-2" />
                ) : status === 'current' ? (
                  <FaEllipsisH className="w-4 h-4 sm:w-5 sm:h-5 mr-1.5 sm:mr-2 animate-pulse" />
                ) : (
                  <IconComponent className="w-4 h-4 sm:w-5 sm:h-5 mr-1.5 sm:mr-2 opacity-70" />
                )}
                <span className="hidden sm:inline-block whitespace-nowrap">{step.label}</span>
                <span className="sm:hidden whitespace-nowrap text-xs">{step.label.length > 15 ? step.label.substring(0,12) + '...' : step.label}</span>
              </span>
            </li>
          );
        })}
      </ol>
    </div>
  );
};

const DataSubmissionPage: React.FC = () => {
  // Zustand Store Integration
  const {
    isEncounterActive,
    patientData: storePatientData,
    formSequence: storeFormSequence,
    currentFormIndex: storeCurrentFormIndex,
    allFormsData: storeAllFormsData,
    startNewEncounter,
    savePartialFormProgress,
    setCurrentFormIndex,
    updatePatientData,
    completeAndClearEncounter,
  } = useSubmissionStore();

  // Local UI State
  const [currentProcessStep, setCurrentProcessStep] = useState<ProcessStep>('initialPatientInput');
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [isFormLoading, setIsFormLoading] = useState(false);
  const [currentlyLoadedFormKey, setCurrentlyLoadedFormKey] = useState<string | null>(null);
  
  // Local state for the patient input form fields, synchronized with storePatientData
  const [localPatientInput, setLocalPatientInput] = useState<PatientInputData>({
    initials: '',
    gender: '',
    dob: '',
    projectConsent: false,
    recontactConsent: false,
  });

  // State for the currently active form being rendered by DynamicFormRenderer
  const [currentFormSchema, setCurrentFormSchema] = useState<any>(null);
  const [currentFormUiSchema, setCurrentFormUiSchema] = useState<any>(null);
  const [currentFormData, setCurrentFormData] = useState<any>({}); // Data for the *current* form being edited
  const [isResuming, setIsResuming] = useState(false); // Local flag for resume flow

  // Helper to check if initial patient mandatory fields are filled
  const isPatientInputDataComplete = useCallback(() => {
    return !!(localPatientInput.initials && localPatientInput.gender && localPatientInput.dob && localPatientInput.projectConsent);
  }, [localPatientInput]);

  // --- Effects --- 

  // Effect to set initial state based on store (e.g., on page load/refresh)
  useEffect(() => {
    if (isEncounterActive && storePatientData) {
      console.log("Store indicates active encounter. Patient:", storePatientData);
      setLocalPatientInput(storePatientData);
      setIsResuming(true);
      // If patient data is complete, move to loading sequence, otherwise stay on input page to complete it
      if (storePatientData.initials && storePatientData.gender && storePatientData.dob && storePatientData.projectConsent) {
        setCurrentProcessStep('loadingFormSequence'); 
      } else {
        setCurrentProcessStep('initialPatientInput');
      }
    } else {
      setCurrentProcessStep('initialPatientInput');
      setIsResuming(false);
    }
  }, [isEncounterActive, storePatientData]); 

  const resetLocalUiStateForNewForm = () => {
    setCurrentFormSchema(null);
    setCurrentFormUiSchema(null);
    setCurrentFormData({}); 
    setErrorMessage(null);
  };

  const resetEntirePageToStart = () => {
    setCurrentProcessStep('initialPatientInput');
    setErrorMessage(null);
    setLocalPatientInput({ initials: '', gender: '', dob: '', projectConsent: false, recontactConsent: false });
    resetLocalUiStateForNewForm();
    setIsResuming(false);
    setCurrentlyLoadedFormKey(null);
  };
  
  const loadFormDefinition = useCallback(async (formIndexToLoad: number, sequenceToUse: FormDefinition[], allDataFromStore: { [key: string]: any }) => {
    if (formIndexToLoad < 0 || formIndexToLoad >= sequenceToUse.length) {
      // This condition means we've completed all forms in the sequence
      if (formIndexToLoad >= sequenceToUse.length && sequenceToUse.length > 0) {
        console.log("All forms in sequence completed. Moving to review step.");
        setCurrentProcessStep('reviewAndSubmit');
        setIsFormLoading(false); // Ensure loading is false
        setCurrentlyLoadedFormKey(null); // No single form is "current" on review page
        resetLocalUiStateForNewForm(); // Clear any single form schema/data
        return;
      }
      setErrorMessage("Invalid form index.");
      setCurrentProcessStep('submissionError');
      return;
    }

    const formDef = sequenceToUse[formIndexToLoad];
    if (!formDef) {
      setErrorMessage(`Form definition not found for index: ${formIndexToLoad}`);
      setCurrentProcessStep('submissionError');
      return;
    }
    
    console.log(`loadFormDefinition: Loading schema for ${formDef.name} (index ${formIndexToLoad})`);
    setCurrentProcessStep('loadingFormSchema');
    setIsFormLoading(true);
    resetLocalUiStateForNewForm();

    try {
      const schemaModule = await import(/* @vite-ignore */ formDef.schemaPath);
      const uiSchemaModule = await import(/* @vite-ignore */ formDef.uiSchemaPath);
      const loadedSchema = schemaModule.default;
      const loadedUiSchema = uiSchemaModule.default;

      setCurrentFormSchema(loadedSchema);
      setCurrentFormUiSchema(loadedUiSchema);

      const initialDataForCurrentForm = allDataFromStore[formDef.key] || {};
      if (Object.keys(initialDataForCurrentForm).length === 0 && loadedSchema?.properties) {
         Object.keys(loadedSchema.properties).forEach(key => {
          const property = loadedSchema.properties[key];
          if (property?.default !== undefined) {
            initialDataForCurrentForm[key] = JSON.parse(JSON.stringify(property.default));
          } else if (property?.type === 'array') {
            initialDataForCurrentForm[key] = [];
          } else if (property?.type === 'object') {
             if (property.properties?.selectedDrugs !== undefined && property.properties?.drugValues !== undefined) {
              initialDataForCurrentForm[key] = { 
                selectedDrugs: property.properties.selectedDrugs.default !== undefined ? JSON.parse(JSON.stringify(property.properties.selectedDrugs.default)) : {},
                drugValues: property.properties.drugValues.default !== undefined ? JSON.parse(JSON.stringify(property.properties.drugValues.default)) : {}
              };
            } else {
              initialDataForCurrentForm[key] = {};
            }
          } 
        });
      }
      setCurrentFormData(initialDataForCurrentForm);
      setCurrentProcessStep('fillingFormInSequence');
      setCurrentlyLoadedFormKey(formDef.key);
    } catch (error) {
      console.error(`Error loading schemas for ${formDef.name}:`, error);
      setErrorMessage(`Error loading form '${formDef.name}'. Please try again.`);
      setCurrentProcessStep('submissionError');
      setCurrentlyLoadedFormKey(null);
    } finally {
      setIsFormLoading(false);
    }
  }, []); 

  // Moved up to be defined before useEffect that uses it
  const handleStartSubmissionSequence = useCallback(async (resuming = false) => {
    if (!resuming) { 
      if (!localPatientInput.initials || !localPatientInput.gender || !localPatientInput.dob) {
        alert('Please fill in all patient identification details.');
        return;
      }
      if (!localPatientInput.projectConsent) {
        alert('Project consent is required to proceed.');
        return;
      }
      // Persist localPatientInput to store immediately when starting
      updatePatientData(localPatientInput);
    }
    
    console.log("handleStartSubmissionSequence called. Resuming:", resuming);
    setCurrentlyLoadedFormKey(null);
    setCurrentProcessStep('loadingFormSequence');
    setErrorMessage(null);
    try {
      const sequence = await fetchFormSequenceForEncounter();
      if (!resuming || (resuming && storeFormSequence.length === 0)) {
          console.log("Starting new encounter in store with fetched sequence.");
          startNewEncounter(localPatientInput, sequence);
          setIsResuming(false); 
      } else if (resuming && storeFormSequence.length > 0) {
          console.log("Resuming existing encounter; sequence already in store. Form loading will be triggered by useEffect.");
      }
    } catch (error) {
      console.error("Error fetching form sequence:", error);
      setErrorMessage("Failed to load the sequence of forms for submission.");
      setCurrentProcessStep('submissionError');
    }
  }, [localPatientInput, startNewEncounter, storeFormSequence.length, updatePatientData]);


  // Effect to trigger form loading when the target form index or sequence changes in the store.
  useEffect(() => {
    if (isFormLoading) { 
      console.log("useEffect[formLoadTrigger]: Form is currently loading, skipping.");
      return;
    }

    if (isEncounterActive && storeFormSequence.length > 0 && storeCurrentFormIndex >= 0 && storeCurrentFormIndex < storeFormSequence.length) {
      const targetFormKey = storeFormSequence[storeCurrentFormIndex].key;
      if (targetFormKey === currentlyLoadedFormKey) {
        console.log(`useEffect[formLoadTrigger]: Form ${targetFormKey} (index ${storeCurrentFormIndex}) is already marked as loaded. Ensuring correct step.`);
        if(currentProcessStep !== 'fillingFormInSequence' && currentProcessStep !== 'loadingFormSchema') {
             setCurrentProcessStep('fillingFormInSequence');
        }
        return;
      }
      
      console.log(`useEffect[formLoadTrigger]: Target form key ${targetFormKey} (index ${storeCurrentFormIndex}) is different from loaded key ${currentlyLoadedFormKey}. Attempting load.`);
      loadFormDefinition(storeCurrentFormIndex, storeFormSequence, storeAllFormsData);
    } else if (isEncounterActive && storeFormSequence.length === 0 && isResuming) {
        console.log("useEffect[formLoadTrigger]: Resuming, but no sequence in store. Attempting to fetch sequence.");
        setCurrentlyLoadedFormKey(null);
        handleStartSubmissionSequence(true); 
    } else {
      if (currentlyLoadedFormKey !== null) {
        setCurrentlyLoadedFormKey(null);
      }
    }
  }, [
    isEncounterActive, 
    storeCurrentFormIndex, 
    storeFormSequence, 
    storeAllFormsData, 
    isResuming, 
    isFormLoading, 
    handleStartSubmissionSequence,
    loadFormDefinition,
    currentlyLoadedFormKey,
    currentProcessStep
  ]); 
  
  const handlePatientInputChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { id, value, type } = event.target;
    const checked = type === 'checkbox' ? (event.target as HTMLInputElement).checked : undefined;

    setLocalPatientInput(prev => ({
      ...prev,
      [id]: type === 'checkbox' ? checked : value,
    }));
    // We will call updatePatientData explicitly when moving away from this step or resuming
  };

  const handleCurrentFormChange = (updatedData: any) => {
    setCurrentFormData(updatedData);
  };

  const persistCurrentFormProgress = () => {
    if (storeFormSequence.length > 0 && storeCurrentFormIndex < storeFormSequence.length) {
      const currentFormKey = storeFormSequence[storeCurrentFormIndex].key;
      savePartialFormProgress(currentFormKey, { ...currentFormData });
      console.log('Progress for', currentFormKey, 'saved to store');
    }
  };

  const handleNavigateForm = (direction: 'next' | 'previous') => {
    persistCurrentFormProgress(); 

    if (direction === 'next') {
      const nextIndex = storeCurrentFormIndex + 1;
      // The loadFormDefinition function will handle transitioning to 'reviewAndSubmit'
      // if nextIndex >= storeFormSequence.length.
      // So, we just update the index here.
      if (storeFormSequence && storeFormSequence.length > 0) { 
        setCurrentFormIndex(nextIndex);
      } else {
        setCurrentProcessStep('reviewAndSubmit'); 
      }
    } else { // direction === 'previous'
      if (storeCurrentFormIndex > 0) {
        setCurrentFormIndex(storeCurrentFormIndex - 1);
      } else {
        // At the first form, navigating previous goes back to patient input
        setCurrentProcessStep('initialPatientInput');
        setCurrentlyLoadedFormKey(null); 
        resetLocalUiStateForNewForm(); 
      }
    }
  };

  const handleSaveAndExit = () => {
    persistCurrentFormProgress();
    alert('Progress Saved!');
    console.log("Save and Exit triggered. Data persisted to store.");
  };

  const handleSubmitAllData = () => {
    persistCurrentFormProgress(); // Ensure last form's data is saved to store
    console.log("Submitting all data for encounter...");
    console.log("Patient Data:", storePatientData);
    console.log("Forms Data:", storeAllFormsData);
    alert("Encounter data submitted (mock)! Check console. Clearing encounter state.");
    completeAndClearEncounter();
    resetEntirePageToStart();
  };

  const handleClearPersistedDataForDev = () => {
    clearPersistedSubmission();
    alert('Persisted submission data cleared. Please refresh.');
    resetEntirePageToStart();
  };

  // --- RENDER FUNCTIONS FOR EACH STEP ---
  const renderInitialPatientInput = () => (
    <SectionCard title="Patient Identification & Consent">
      <div className="space-y-6">
        <div>
          <h3 className="text-lg font-medium text-slate-700 dark:text-slate-200 mb-3">Patient Details</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <InputField
              label="Patient Initials"
              id="initials"
              type="text"
              placeholder="e.g., JS"
              value={localPatientInput.initials || ''} 
              onChange={handlePatientInputChange}
              required
            />
            <InputField
              label="Gender"
              id="gender" 
              type="text" 
              placeholder="e.g., M or F"
              value={localPatientInput.gender || ''} 
              onChange={handlePatientInputChange}
              required
            />
            <InputField
              label="Date of Birth"
              id="dob"
              type="date"
              value={localPatientInput.dob || ''} 
              onChange={handlePatientInputChange}
              required
            />
          </div>
        </div>

        <div>
          <h3 className="text-lg font-medium text-slate-700 dark:text-slate-200 mb-3">Consent Information</h3>
          <div className="space-y-3 bg-slate-50 dark:bg-slate-700/30 p-4 rounded-md border border-slate-200 dark:border-slate-600">
            <div className="flex items-start">
              <input
                id="projectConsent"
                type="checkbox"
                checked={localPatientInput.projectConsent || false} 
                onChange={handlePatientInputChange}
                className="h-5 w-5 text-blue-600 border-slate-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-slate-800 dark:bg-slate-700 dark:border-slate-600 mt-0.5 shrink-0"
              />
              <label htmlFor="projectConsent" className="ml-2.5 text-sm text-slate-700 dark:text-slate-200">
                I confirm that project-specific consent has been obtained from the patient/guardian for participation in this study and data collection as per protocol <span className="font-semibold">[Project Name/ID Placeholder]</span>.
                <span className="text-red-500 ml-1">*</span>
              </label>
            </div>
            <div className="flex items-start">
              <input
                id="recontactConsent"
                type="checkbox"
                checked={localPatientInput.recontactConsent || false} 
                onChange={handlePatientInputChange}
                className="h-5 w-5 text-blue-600 border-slate-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-slate-800 dark:bg-slate-700 dark:border-slate-600 mt-0.5 shrink-0"
              />
              <label htmlFor="recontactConsent" className="ml-2.5 text-sm text-slate-700 dark:text-slate-200">
                Patient/guardian consents to potential re-contact for follow-up information or future related studies, if applicable.
              </label>
            </div>
          </div>
        </div>

        <div className="flex justify-end space-x-3 mt-6">
          <Button 
            variant="outline-slate" 
            onClick={resetEntirePageToStart} 
            iconLeft={<FaUndo />}
            disabled={isFormLoading || currentProcessStep === 'loadingFormSequence'}
          >
            Cancel & Reset
          </Button>
          <Button 
            variant="primary" 
            onClick={() => handleStartSubmissionSequence(isResuming && isEncounterActive)} 
            iconRight={<FaArrowRight />}
            isLoading={isFormLoading || currentProcessStep === 'loadingFormSequence'}
            disabled={!isPatientInputDataComplete()}
          >
            {isResuming && isEncounterActive ? 'Resume Encounter' : 'Start Data Collection'}
          </Button>
        </div>
      </div>
    </SectionCard>
  );

  const renderLoading = (message: string) => (
    <div className="flex flex-col items-center justify-center p-10 bg-white dark:bg-slate-800 rounded-lg shadow-md min-h-[300px]">
      <FaSpinner className="animate-spin text-4xl text-blue-500 mb-4" />
      <p className="text-slate-600 dark:text-slate-300">{message}</p>
    </div>
  );

  const renderError = () => (
    <SectionCard title="Error">
      <div className="flex flex-col items-center justify-center p-6">
        <FaExclamationTriangle className="text-5xl text-red-500 mb-4" />
        <p className="text-red-600 dark:text-red-400 text-center mb-4">{errorMessage || "An unexpected error occurred."}</p>
        <Button variant="outline-primary" onClick={resetEntirePageToStart} iconLeft={<FaRedoAlt />}>
          Try Again from Start
        </Button>
      </div>
    </SectionCard>
  );

  const renderFormNavigation = () => {
    const currentFormDef = storeFormSequence && storeFormSequence.length > storeCurrentFormIndex && storeCurrentFormIndex >= 0 ? storeFormSequence[storeCurrentFormIndex] : null;
    const isLastForm = storeFormSequence && storeFormSequence.length > 0 ? storeCurrentFormIndex === storeFormSequence.length - 1 : false;

    return (
      <div className="mt-8 pt-6 border-t border-slate-200 dark:border-slate-700 flex flex-col sm:flex-row justify-between items-center space-y-3 sm:space-y-0 print:hidden">
        <Button 
          variant="outline-slate" 
          onClick={() => handleNavigateForm('previous')} 
          iconLeft={<FaArrowLeft />}
          disabled={isFormLoading || (storeCurrentFormIndex === 0 && currentProcessStep === 'fillingFormInSequence')}
        >
          {storeCurrentFormIndex === 0 ? 'Back to Patient Info' : 'Previous Form'}
        </Button>
        
        <div className="flex items-center space-x-2">
            <span className="text-sm text-slate-500 dark:text-slate-400">
                Form {storeCurrentFormIndex + 1} of {storeFormSequence.length}: {currentFormDef?.name || 'N/A'}
            </span>
        </div>

        <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3">
          <Button 
            variant="ghost" 
            onClick={handleSaveAndExit} 
            iconLeft={<FaSave />}
            disabled={isFormLoading}
            className="text-slate-600 dark:text-slate-300"
          >
            Save & Exit (Later)
          </Button>
          <Button 
            variant="primary" 
            onClick={() => handleNavigateForm('next')} 
            iconRight={<FaArrowRight />}
            isLoading={isFormLoading}
          >
            {isLastForm ? 'Proceed to Review' : 'Next Form'}
          </Button>
        </div>
      </div>
    );
  };
  
  const renderFillingFormInSequence = () => {
    if (!currentFormSchema || !currentFormUiSchema) {
      return renderLoading("Preparing form...");
    }
    const currentFormDef = storeFormSequence && storeFormSequence.length > storeCurrentFormIndex && storeCurrentFormIndex >=0 ? storeFormSequence[storeCurrentFormIndex] : null;

    return (
      <SectionCard title={currentFormDef?.name || "Data Form"} className="animation-fade-in">
        <DynamicFormRenderer
          schema={currentFormSchema}
          uiSchema={currentFormUiSchema}
          formData={currentFormData}
          onFormDataChange={handleCurrentFormChange}
        />
        {renderFormNavigation()}
      </SectionCard>
    );
  };

  const renderReviewAndSubmit = () => {
    return (
      <SectionCard title="Review Encounter Data" className="animation-fade-in">
        <div className="space-y-6">
          <div>
            <h3 className="text-lg font-semibold text-slate-700 dark:text-slate-200 mb-2 border-b pb-1">Patient Information</h3>
            <pre className="text-xs bg-slate-100 dark:bg-slate-700 p-3 rounded overflow-x-auto">
              {JSON.stringify(storePatientData || {message: "Patient data not available."}, null, 2)}
            </pre>
          </div>

          {(storeFormSequence || []).map(formDef => (
            <div key={formDef.key}>
              <h3 className="text-lg font-semibold text-slate-700 dark:text-slate-200 mb-2 border-b pb-1">{formDef.name} (v{formDef.version})</h3>
              <pre className="text-xs bg-slate-100 dark:bg-slate-700 p-3 rounded overflow-x-auto">
                {JSON.stringify(storeAllFormsData[formDef.key] || {message: "No data recorded for this form."}, null, 2)}
              </pre>
            </div>
          ))}
        </div>

        <div className="mt-8 pt-6 border-t border-slate-200 dark:border-slate-700 flex flex-col sm:flex-row justify-between items-center space-y-3 sm:space-y-0">
           <Button 
            variant="outline-slate" 
            onClick={() => {
                if (storeFormSequence && storeFormSequence.length > 0) {
                    setCurrentFormIndex(storeFormSequence.length - 1);
                } else {
                    setCurrentProcessStep('initialPatientInput'); 
                }
            }} 
            iconLeft={<FaArrowLeft />}
            disabled={isFormLoading || !storeFormSequence || storeFormSequence.length === 0}
          >
            Back to Edit Last Form
          </Button>
          <Button 
            variant="success" 
            onClick={handleSubmitAllData} 
            iconLeft={<FaPaperPlane />}
            isLoading={isFormLoading} 
          >
            Confirm & Submit All Data
          </Button>
        </div>
      </SectionCard>
    );
  };


  // Main Render Logic
  return (
    <div className="min-h-full bg-gradient-to-br from-slate-50 via-emerald-50/30 to-teal-50/20 dark:from-slate-900 dark:via-emerald-950/20 dark:to-slate-900">
      {/* Enhanced Colorful Page Header */}
      <div className="relative overflow-hidden bg-gradient-to-br from-white via-emerald-50/50 to-teal-50/30 dark:from-slate-800 dark:via-slate-700/80 dark:to-slate-800 border-b-2 border-emerald-200/60 dark:border-emerald-800/30 shadow-xl mb-6">
        <div className="absolute inset-0 bg-gradient-to-r from-emerald-500/10 via-teal-500/5 to-cyan-500/10 dark:from-emerald-500/5 dark:via-teal-500/3 dark:to-cyan-500/5"></div>
        <div className="absolute -top-1/2 -right-1/4 w-1/2 h-full bg-gradient-to-l from-white/20 to-transparent dark:from-slate-700/20 rounded-full transform rotate-12"></div>
        <div className="relative z-10 px-4 sm:px-6 py-6 sm:py-8">
          <div className="flex items-center gap-4 mb-2">
            <div className="p-3 rounded-xl bg-gradient-to-br from-emerald-500 to-teal-500 shadow-lg">
              <FaFileMedical className="w-6 h-6 text-white" />
            </div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-emerald-600 via-teal-600 to-cyan-600 bg-clip-text text-transparent">
              Data Submission
            </h1>
          </div>
          <p className="text-slate-600 dark:text-slate-300 text-lg">
            Collect and submit clinical research data for your active project
          </p>
        </div>
      </div>
      
      <div className="p-4 sm:p-6 space-y-4">
      { (currentProcessStep === 'initialPatientInput' || 
         currentProcessStep === 'fillingFormInSequence' || 
         currentProcessStep === 'reviewAndSubmit' ||
         (currentProcessStep === 'loadingFormSequence' && isPatientInputDataComplete()) ||
         (currentProcessStep === 'loadingFormSchema' && isPatientInputDataComplete() && storeFormSequence && storeFormSequence.length > 0)
        ) && (
        <SubmissionStepper 
          currentOverallStep={currentProcessStep}
          currentFormIndexInSequence={storeCurrentFormIndex}
          formSequence={storeFormSequence}
          patientInputComplete={isPatientInputDataComplete()}
        />
      )}

      {currentProcessStep === 'initialPatientInput' && renderInitialPatientInput()}
      {currentProcessStep === 'loadingFormSequence' && renderLoading("Loading submission sequence...")}
      {currentProcessStep === 'loadingFormSchema' && renderLoading("Loading form definition...")}
      {currentProcessStep === 'fillingFormInSequence' && renderFillingFormInSequence()}
      {currentProcessStep === 'reviewAndSubmit' && renderReviewAndSubmit()}
      {currentProcessStep === 'submissionError' && renderError()}
      
       <div className="mt-8 p-4 bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-700 rounded-md print:hidden">
        <p className="text-sm text-amber-700 dark:text-amber-300 font-semibold mb-2">Developer Tools:</p>
        <Button variant="warning" size="sm" onClick={handleClearPersistedDataForDev}>
          Clear Persisted Encounter Data (Dev Only)
        </Button>
      </div>
      </div>
    </div>
  );
};

export default DataSubmissionPage; 


###############################################################################
### FILE: pages/FormBuilderPage.tsx
###############################################################################
import React, { useState } from 'react';
import FormBuilderToolbar from '../components/forms/FormBuilderToolbar';
import FormMetadataEditor from '../components/forms/FormMetadataEditor';
import SchemaEditor from '../components/forms/SchemaEditor'; // Reused for both schemas

const initialSchema = JSON.stringify({
  "title": "My New Form",
  "description": "A description for my new form.",
  "type": "object",
  "properties": {
    "fieldName": {
      "type": "string",
      "title": "My First Field"
    }
  }
}, null, 2);

const initialUiSchema = JSON.stringify({
  "fieldName": {
    "ui:widget": "InputFieldWidget"
  }
}, null, 2);

const FormBuilderPage: React.FC = () => {
  const [formTitle, setFormTitle] = useState('New Form');
  const [formDescription, setFormDescription] = useState('A basic form description.');
  const [formVersion, setFormVersion] = useState('1.0.0'); // Placeholder

  const [schemaJsonString, setSchemaJsonString] = useState<string>(initialSchema);
  const [uiSchemaJsonString, setUiSchemaJsonString] = useState<string>(initialUiSchema);

  const [schemaError, setSchemaError] = useState<string | null>(null);
  const [uiSchemaError, setUiSchemaError] = useState<string | null>(null);

  const handleSchemaChange = (newJsonString: string) => {
    setSchemaJsonString(newJsonString);
    try {
      JSON.parse(newJsonString);
      setSchemaError(null);
    } catch (e: any) {
      setSchemaError(e.message);
    }
  };

  const handleUiSchemaChange = (newJsonString: string) => {
    setUiSchemaJsonString(newJsonString);
    try {
      JSON.parse(newJsonString);
      setUiSchemaError(null);
    } catch (e: any) {
      setUiSchemaError(e.message);
    }
  };

  const handleNewForm = () => {
    setFormTitle('Untitled Form');
    setFormDescription('');
    setFormVersion('1.0.0');
    setSchemaJsonString(JSON.stringify({ type: 'object', properties: {} }, null, 2));
    setUiSchemaJsonString(JSON.stringify({}, null, 2));
    setSchemaError(null);
    setUiSchemaError(null);
    console.log("New Blank Form clicked");
  };

  const handleLoadForm = () => {
    // Placeholder - In future, this would open a modal to select & load form schemas
    console.log("Load Form clicked (Placeholder)");
    alert("Load Form functionality not yet implemented.");
  };

  const handleSaveForm = () => {
    // Placeholder - In future, this would validate and send schemas to backend
    console.log("Save Form clicked (Placeholder)");
    if (schemaError || uiSchemaError) {
      alert("Cannot save: Please fix JSON errors first.");
      return;
    }
    alert("Form save functionality not yet implemented. Check console for current data.");
    console.log("Form Metadata:", { title: formTitle, description: formDescription, version: formVersion });
    console.log("Schema JSON:", schemaJsonString);
    console.log("UI Schema JSON:", uiSchemaJsonString);
  };

  return (
    <div className="min-h-full bg-gradient-to-br from-slate-50 via-purple-50/30 to-indigo-50/20 dark:from-slate-900 dark:via-purple-950/20 dark:to-slate-900">
      {/* Enhanced Colorful Page Header */}
      <div className="relative overflow-hidden bg-gradient-to-br from-white via-purple-50/50 to-indigo-50/30 dark:from-slate-800 dark:via-slate-700/80 dark:to-slate-800 border-b-2 border-purple-200/60 dark:border-purple-800/30 shadow-xl mb-6">
        <div className="absolute inset-0 bg-gradient-to-r from-purple-500/10 via-indigo-500/5 to-blue-500/10 dark:from-purple-500/5 dark:via-indigo-500/3 dark:to-blue-500/5"></div>
        <div className="absolute -top-1/2 -right-1/4 w-1/2 h-full bg-gradient-to-l from-white/20 to-transparent dark:from-slate-700/20 rounded-full transform rotate-12"></div>
        <div className="relative z-10 px-4 sm:px-6 py-6 sm:py-8">
          <div className="flex items-center gap-4 mb-2">
            <div className="p-3 rounded-xl bg-gradient-to-br from-purple-500 to-indigo-500 shadow-lg">
              <div className="w-6 h-6 text-white">⚡</div>
            </div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-600 via-indigo-600 to-blue-600 bg-clip-text text-transparent">
              Form Builder
            </h1>
          </div>
          <p className="text-slate-600 dark:text-slate-300 text-lg">
            Design and customize clinical research forms for your project
          </p>
        </div>
      </div>
      
      <div className="p-0 flex flex-col h-[calc(100vh-var(--header-height,4rem)-var(--page-padding,3rem)-8rem)] max-h-[calc(100vh-var(--header-height,4rem)-var(--page-padding,3rem)-8rem)]">
        <div className="px-4 sm:px-6">
      <FormBuilderToolbar 
        onNewForm={handleNewForm}
        onLoadForm={handleLoadForm}
        onSaveForm={handleSaveForm}
      />
      <div className="flex-grow grid grid-cols-1 lg:grid-cols-12 gap-4 min-h-0">
        {/* Left Column: Metadata & UI Schema Editor */}
        <div className="lg:col-span-4 flex flex-col gap-4 min-h-0">
          <FormMetadataEditor
            title={formTitle}
            onTitleChange={setFormTitle}
            description={formDescription}
            onDescriptionChange={setFormDescription}
            version={formVersion}
          />
          <div className="flex-grow min-h-0">
            <SchemaEditor
              id="uiSchemaEditor"
              title="UI Schema Editor (.uiSchema.json)"
              jsonString={uiSchemaJsonString}
              onJsonStringChange={handleUiSchemaChange}
              error={uiSchemaError}
              height="100%" // Attempt to fill remaining space
            />
          </div>
        </div>

        {/* Right Column: Main Schema Editor */}
        <div className="lg:col-span-8 min-h-0">
          <SchemaEditor
            id="mainSchemaEditor"
            title="Form Data Schema Editor (.schema.json)"
            jsonString={schemaJsonString}
            onJsonStringChange={handleSchemaChange}
            error={schemaError}
            height="calc(100% - 0px)" // Adjust if FormMetadataEditor has variable height or there are other elements.
          />
        </div>
      </div>
    </div>
    </div>
  </div>
  );
};

export default FormBuilderPage; 


###############################################################################
### FILE: pages/NotFoundPage.tsx
###############################################################################
import React from 'react';
import { Link } from 'react-router-dom';

const NotFoundPage: React.FC = () => {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 dark:bg-slate-900 text-center p-4">
      <h1 className="text-6xl font-bold text-blue-600 dark:text-blue-500">404</h1>
      <h2 className="text-2xl font-semibold mt-4 mb-2 text-slate-800 dark:text-slate-100">Page Not Found</h2>
      <p className="text-gray-700 dark:text-slate-300 mb-6">Sorry, the page you are looking for does not exist.</p>
      <Link 
        to="/"
        className="px-6 py-3 bg-blue-600 dark:bg-blue-500 text-white dark:text-slate-900 rounded-md hover:bg-blue-700 dark:hover:bg-blue-400 transition-colors duration-300"
      >
        Go to Homepage
      </Link>
    </div>
  );
};

export default NotFoundPage; 


###############################################################################
### FILE: pages/NotificationSchedulerPage.tsx
###############################################################################
import React, { useState } from 'react';
import { 
  PiBellDuotone, 
  PiCalendarPlusDuotone, 
  PiEnvelopeDuotone, 
  PiClockDuotone,
  PiListChecksDuotone,
  PiPlayDuotone,
  PiPauseDuotone,
  PiTrashDuotone,
  PiPlusDuotone
} from 'react-icons/pi';
import Button from '../components/ui/Button';

interface NotificationRule {
  id: string;
  name: string;
  description: string;
  trigger: string;
  delay: string;
  status: 'active' | 'paused';
  type: 'email' | 'sms' | 'whatsapp';
  recipients: number;
}

const NotificationSchedulerPage: React.FC = () => {
  const [selectedRule, setSelectedRule] = useState<NotificationRule | null>(null);

  // Mock notification rules
  const mockRules: NotificationRule[] = [
    {
      id: '1',
      name: '30-Day Follow-up',
      description: 'Send follow-up reminder 30 days after patient discharge',
      trigger: 'Patient Discharge',
      delay: '30 days',
      status: 'active',
      type: 'email',
      recipients: 142
    },
    {
      id: '2', 
      name: 'Weekly Study Update',
      description: 'Weekly progress update to study coordinators',
      trigger: 'Every Monday',
      delay: '0 days',
      status: 'active',
      type: 'email',
      recipients: 5
    },
    {
      id: '3',
      name: '6-Month Follow-up',
      description: 'Long-term follow-up questionnaire reminder',
      trigger: 'Patient Discharge',
      delay: '180 days',
      status: 'paused',
      type: 'email',
      recipients: 87
    }
  ];

  const getStatusColor = (status: 'active' | 'paused') => {
    return status === 'active' 
      ? 'bg-emerald-100 dark:bg-emerald-900/30 text-emerald-700 dark:text-emerald-300'
      : 'bg-amber-100 dark:bg-amber-900/30 text-amber-700 dark:text-amber-300';
  };

  const getTypeIcon = (type: 'email' | 'sms' | 'whatsapp') => {
    switch(type) {
      case 'email': return <PiEnvelopeDuotone />;
      case 'sms': return <PiBellDuotone />;
      case 'whatsapp': return <PiBellDuotone />;
      default: return <PiEnvelopeDuotone />;
    }
  };

  return (
    <div className="p-4 sm:p-6 space-y-8 bg-gradient-to-br from-slate-50 via-blue-50/30 to-purple-50/30 dark:from-slate-900 dark:via-slate-900 dark:to-slate-900 min-h-full max-w-6xl mx-auto">
      <div className="flex items-center justify-between mb-8">
        <div>
          <h1 className="text-3xl md:text-4xl font-bold text-gradient mb-2">Notification Scheduler</h1>
          <p className="text-slate-600 dark:text-slate-300 text-lg">Configure automated reminders and notifications for your research project.</p>
        </div>
        <Button 
          variant="primary" 
          size="lg" 
          iconLeft={<PiPlusDuotone />}
          className="shadow-lg"
        >
          New Rule
        </Button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Notification Rules List */}
        <section className="lg:col-span-2 card-enhanced p-6 rounded-xl shadow-xl">
          <h2 className="text-xl font-semibold text-gradient-cool flex items-center mb-6">
            <PiListChecksDuotone className="mr-3 text-2xl text-blue-500 dark:text-blue-400" /> Notification Rules
          </h2>
          
          <div className="space-y-4">
            {mockRules.map((rule) => (
              <div 
                key={rule.id}
                className={`p-4 rounded-xl border transition-all duration-200 cursor-pointer hover:shadow-md ${
                  selectedRule?.id === rule.id 
                    ? 'border-blue-500 dark:border-blue-400 bg-blue-50/50 dark:bg-blue-500/10 shadow-lg shadow-blue-500/25' 
                    : 'border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800/60 hover:border-blue-300 dark:hover:border-blue-500'
                }`}
                onClick={() => setSelectedRule(rule)}
              >
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center space-x-3">
                    <div className="p-2 rounded-lg bg-gradient-to-r from-blue-500 to-purple-500 text-white">
                      {getTypeIcon(rule.type)}
                    </div>
                    <div>
                      <h3 className="font-semibold text-slate-800 dark:text-slate-100">{rule.name}</h3>
                      <p className="text-sm text-slate-600 dark:text-slate-300">{rule.description}</p>
                    </div>
                  </div>
                  <span className={`text-xs px-2 py-1 rounded-full font-medium ${getStatusColor(rule.status)}`}>
                    {rule.status}
                  </span>
                </div>
                
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 text-sm">
                  <div className="flex items-center text-slate-600 dark:text-slate-300">
                    <PiCalendarPlusDuotone className="mr-2 text-slate-400" />
                    <span>Trigger: {rule.trigger}</span>
                  </div>
                  <div className="flex items-center text-slate-600 dark:text-slate-300">
                    <PiClockDuotone className="mr-2 text-slate-400" />
                    <span>Delay: {rule.delay}</span>
                  </div>
                  <div className="flex items-center text-slate-600 dark:text-slate-300">
                    <PiBellDuotone className="mr-2 text-slate-400" />
                    <span>{rule.recipients} recipients</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </section>

        {/* Rule Details & Actions */}
        <aside className="lg:col-span-1 space-y-6">
          {selectedRule ? (
            <>
              <section className="card-colorful p-6 rounded-xl shadow-lg">
                <h2 className="text-xl font-semibold text-gradient-warm flex items-center mb-4 relative z-10">
                  <PiBellDuotone className="mr-3 text-2xl text-purple-500 dark:text-purple-400" /> Rule Details
                </h2>
                
                <div className="space-y-4 relative z-10">
                  <div>
                    <h3 className="font-semibold text-slate-800 dark:text-slate-100">{selectedRule.name}</h3>
                    <p className="text-sm text-slate-600 dark:text-slate-300 mt-1">{selectedRule.description}</p>
                  </div>
                  
                  <div className="space-y-3 pt-3 border-t border-slate-200/50 dark:border-slate-700/50">
                    <div className="flex justify-between">
                      <span className="text-sm font-medium text-slate-700 dark:text-slate-200">Status</span>
                      <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(selectedRule.status)}`}>
                        {selectedRule.status}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium text-slate-700 dark:text-slate-200">Type</span>
                      <span className="text-sm text-slate-600 dark:text-slate-300 capitalize">{selectedRule.type}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium text-slate-700 dark:text-slate-200">Recipients</span>
                      <span className="text-sm text-slate-600 dark:text-slate-300">{selectedRule.recipients}</span>
                    </div>
                  </div>
                </div>
              </section>

              <section className="card-colorful p-6 rounded-xl shadow-lg">
                <h2 className="text-lg font-semibold text-gradient flex items-center mb-4 relative z-10">
                  Actions
                </h2>
                
                <div className="space-y-3 relative z-10">
                  <Button 
                    variant={selectedRule.status === 'active' ? 'warning' : 'success'} 
                    fullWidth 
                    size="sm"
                    iconLeft={selectedRule.status === 'active' ? <PiPauseDuotone /> : <PiPlayDuotone />}
                  >
                    {selectedRule.status === 'active' ? 'Pause Rule' : 'Activate Rule'}
                  </Button>
                  
                  <Button 
                    variant="outline-slate" 
                    fullWidth 
                    size="sm"
                  >
                    Edit Rule
                  </Button>
                  
                  <Button 
                    variant="danger" 
                    fullWidth 
                    size="sm"
                    iconLeft={<PiTrashDuotone />}
                  >
                    Delete Rule
                  </Button>
                </div>
              </section>
            </>
          ) : (
            <section className="card-colorful p-6 rounded-xl shadow-lg">
              <div className="text-center py-8 relative z-10">
                <PiBellDuotone className="text-4xl text-slate-400 dark:text-slate-500 mx-auto mb-4 animate-pulse-glow" />
                <p className="text-slate-500 dark:text-slate-400">Select a notification rule</p>
                <p className="text-sm text-slate-400 dark:text-slate-500 mt-1">Choose a rule from the list to view details and actions</p>
              </div>
            </section>
          )}

          {/* Statistics */}
          <section className="card-colorful p-6 rounded-xl shadow-lg">
            <h2 className="text-lg font-semibold text-gradient-cool flex items-center mb-4 relative z-10">
              <PiCalendarPlusDuotone className="mr-2 text-slate-500 dark:text-slate-400" /> Statistics
            </h2>
            
            <div className="space-y-3 relative z-10">
              <div className="flex justify-between items-center py-2 border-b border-slate-200/50 dark:border-slate-700/50">
                <span className="text-sm font-medium text-slate-700 dark:text-slate-200">Active Rules</span>
                <span className="text-sm font-semibold text-emerald-600 dark:text-emerald-400">2</span>
              </div>
              <div className="flex justify-between items-center py-2 border-b border-slate-200/50 dark:border-slate-700/50">
                <span className="text-sm font-medium text-slate-700 dark:text-slate-200">Total Recipients</span>
                <span className="text-sm font-semibold text-blue-600 dark:text-blue-400">234</span>
              </div>
              <div className="flex justify-between items-center py-2">
                <span className="text-sm font-medium text-slate-700 dark:text-slate-200">This Week Sent</span>
                <span className="text-sm font-semibold text-purple-600 dark:text-purple-400">47</span>
              </div>
            </div>
          </section>
        </aside>
      </div>
    </div>
  );
};

export default NotificationSchedulerPage; 


###############################################################################
### FILE: pages/PatientSearchPage.tsx
###############################################################################
import React, { useState } from 'react';
import { 
  PiMagnifyingGlassDuotone, 
  PiUserDuotone, 
  PiHashDuotone,
  PiListChecksDuotone,
  PiEyeDuotone,
  PiDownloadDuotone
} from 'react-icons/pi';
import InputField from '../components/ui/InputField';
import Button from '../components/ui/Button';

const PatientSearchPage: React.FC = () => {
  const [searchInitials, setSearchInitials] = useState('');
  const [searchGender, setSearchGender] = useState('');
  const [searchDOB, setSearchDOB] = useState('');
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [isSearching, setIsSearching] = useState(false);
  const [hasSearched, setHasSearched] = useState(false);

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!searchInitials || !searchGender || !searchDOB) {
      alert('Please fill in all search fields');
      return;
    }

    setIsSearching(true);
    setHasSearched(false);

    // Mock search delay
    setTimeout(() => {
      // Mock search results
      const mockResults = [
        {
          patientId: 'ANON_12345',
          submissions: [
            { formName: 'Pre-Anesthesia', date: '2024-01-15', status: 'Complete' },
            { formName: 'Intraoperative', date: '2024-01-15', status: 'Complete' },
            { formName: 'Recovery', date: '2024-01-15', status: 'Pending' }
          ]
        }
      ];
      
      setSearchResults(mockResults);
      setIsSearching(false);
      setHasSearched(true);
    }, 1000);
  };

  const handleInputChange = (field: string) => (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    switch(field) {
      case 'initials':
        setSearchInitials(value);
        break;
      case 'gender':
        setSearchGender(value);
        break;
      case 'dob':
        setSearchDOB(value);
        break;
    }
  };

  return (
    <div className="p-4 sm:p-6 space-y-8 bg-gradient-to-br from-slate-50 via-blue-50/30 to-purple-50/30 dark:from-slate-900 dark:via-slate-900 dark:to-slate-900 min-h-full max-w-6xl mx-auto">
      
      {/* Enhanced Page Header */}
      <div className="relative overflow-hidden bg-gradient-to-br from-white via-blue-50/50 to-indigo-50/30 dark:from-slate-800 dark:via-slate-700/80 dark:to-slate-800 border-2 border-blue-200/60 dark:border-blue-800/30 shadow-xl mb-6 rounded-xl">
        <div className="absolute inset-0 bg-gradient-to-r from-blue-500/10 via-indigo-500/5 to-purple-500/10 dark:from-blue-500/5 dark:via-indigo-500/3 dark:to-purple-500/5"></div>
        <div className="absolute -top-1/2 -right-1/4 w-1/2 h-full bg-gradient-to-l from-white/20 to-transparent dark:from-slate-700/20 rounded-full transform rotate-12"></div>
        <div className="relative z-10 px-6 py-8">
          <div className="flex items-center gap-4 mb-2">
            <div className="p-3 rounded-xl bg-gradient-to-br from-blue-500 to-indigo-500 shadow-lg">
              <PiMagnifyingGlassDuotone className="w-6 h-6 text-white" />
            </div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 bg-clip-text text-transparent">
              Patient Search
            </h1>
          </div>
          <p className="text-slate-600 dark:text-slate-300 text-lg">
            Search for patient data using pseudonymized identifiers
          </p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      {/* Search Form */}
        <section className="lg:col-span-1 card-enhanced p-6 rounded-xl shadow-xl">
          <h2 className="text-xl font-semibold text-slate-800 dark:text-slate-200 icon-text-colorful flex items-center mb-6">
            <PiMagnifyingGlassDuotone className="icon mr-3 text-2xl" /> Search Criteria
        </h2>
        
          <form onSubmit={handleSearch} className="space-y-4">
            <InputField
              label="Patient Initials"
              id="initials"
              type="text"
              placeholder="e.g., JS"
              value={searchInitials}
              onChange={handleInputChange('initials')}
              required
            />
            
            <InputField
              label="Gender"
              id="gender"
              type="text"
              placeholder="M or F"
              value={searchGender}
              onChange={handleInputChange('gender')}
                required
            />

            <InputField
              label="Date of Birth"
              id="dob"
              type="date"
              value={searchDOB}
              onChange={handleInputChange('dob')}
              required
            />
            
            <Button
              type="submit"
              variant="primary"
              fullWidth 
              isLoading={isSearching}
              iconLeft={<PiMagnifyingGlassDuotone />}
              className="mt-6"
            >
              {isSearching ? 'Searching...' : 'Search Patient'}
            </Button>
        </form>
      </section>

      {/* Search Results */}
        <section className="lg:col-span-2 card-enhanced p-6 rounded-xl shadow-xl">
          <h2 className="text-xl font-semibold text-slate-800 dark:text-slate-200 icon-text-colorful flex items-center mb-6">
            <PiListChecksDuotone className="icon mr-3 text-2xl" /> Search Results
        </h2>
        
          {!hasSearched && searchResults.length === 0 && (
            <div className="text-center py-12">
              <PiUserDuotone className="text-4xl text-slate-400 dark:text-slate-500 mx-auto mb-4" />
              <p className="text-slate-500 dark:text-slate-400">Enter search criteria to find patient data</p>
          </div>
          )}

          {hasSearched && searchResults.length === 0 && (
            <div className="text-center py-12">
              <PiUserDuotone className="text-4xl text-slate-400 dark:text-slate-500 mx-auto mb-4" />
              <p className="text-slate-500 dark:text-slate-400">No patients found matching the search criteria</p>
          </div>
        )}

          {searchResults.length > 0 && (
            <div className="space-y-4">
              {searchResults.map((result, index) => (
                <div key={index} className="border border-slate-200 dark:border-slate-700 rounded-lg p-4 bg-slate-50 dark:bg-slate-800/50">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center space-x-3">
                      <div className="p-2 rounded-lg bg-blue-500 text-white">
                        <PiHashDuotone className="w-4 h-4" />
                      </div>
                      <div>
                        <h3 className="font-semibold text-slate-800 dark:text-slate-200">Patient ID: {result.patientId}</h3>
                        <p className="text-sm text-slate-500 dark:text-slate-400">{result.submissions.length} submissions found</p>
                      </div>
                    </div>
                    <Button variant="outline-primary" size="sm" iconRight={<PiDownloadDuotone />}>
                      Export Data
                    </Button>
                  </div>
                  
                  <div className="space-y-2">
                    <h4 className="text-sm font-medium text-slate-700 dark:text-slate-300">Submissions:</h4>
                    {result.submissions.map((submission: any, subIndex: number) => (
                      <div key={subIndex} className="flex items-center justify-between p-3 bg-white dark:bg-slate-700 rounded-md border border-slate-200 dark:border-slate-600">
                        <div className="flex items-center space-x-3">
                          <PiListChecksDuotone className="w-4 h-4 text-slate-500 dark:text-slate-400" />
                <div>
                            <p className="font-medium text-slate-700 dark:text-slate-200">{submission.formName}</p>
                            <p className="text-xs text-slate-500 dark:text-slate-400">{submission.date}</p>
                          </div>
                </div>
                <div className="flex items-center space-x-2">
                          <span className={`px-2 py-1 text-xs rounded-full ${
                            submission.status === 'Complete' 
                              ? 'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300'
                              : 'bg-amber-100 dark:bg-amber-900/30 text-amber-700 dark:text-amber-300'
                          }`}>
                            {submission.status}
                          </span>
                          <Button variant="ghost" size="sm">
                            <PiEyeDuotone className="w-4 h-4" />
                          </Button>
                </div>
              </div>
                    ))}
                </div>
                </div>
              ))}
          </div>
        )}
      </section>
        </div>
    </div>
  );
};

export default PatientSearchPage; 


###############################################################################
### FILE: pages/ProjectDetailsPage.tsx
###############################################################################
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import useProjectStore, { Project } from '../stores/projectStore';
// import useAuthStore from '../stores/authStore';
import {
  PiArrowLeftDuotone, PiUsersDuotone, PiUserCirclePlusDuotone, 
  PiFileTextDuotone, PiChartLineUpDuotone, PiChatDotsDuotone, PiGearDuotone,
  PiClipboardTextDuotone, PiArchiveDuotone, PiHourglassDuotone, PiMegaphoneDuotone,
  PiFlagDuotone, PiBriefcaseDuotone, PiCalendarDuotone
} from 'react-icons/pi';
import Button from '../components/ui/Button';
import DashboardGreetingCard from '../components/ui/DashboardGreetingCard'; // For inspiration, not direct use here yet

const ProjectDetailsPage: React.FC = () => {
  const { projectId } = useParams<{ projectId: string }>();
  const navigate = useNavigate();
  const { availableProjects, setActiveProject, activeProjectDetails, isLoading } = useProjectStore();
  // const { user } = useAuthStore(); // To check permissions later if needed

  const [currentProject, setCurrentProject] = useState<Project | null | undefined>(undefined); // Initialize as undefined

  useEffect(() => {
    if (projectId) {
      // If activeProjectDetails matches, use it directly (already set by dashboard click)
      if (activeProjectDetails && activeProjectDetails.id === projectId) {
        setCurrentProject(activeProjectDetails);
      } else {
        // Otherwise, try to find it in availableProjects (e.g., direct navigation to URL)
        const project = availableProjects.find(p => p.id === projectId);
        if (project) {
          setActiveProject(projectId); // Set it as active in the store
          setCurrentProject(project);
        } else {
          // If still not found and projects have loaded (or finished loading), it might be an invalid ID
          if (!isLoading && availableProjects.length > 0) {
            setCurrentProject(null); // Mark as not found
          } else if (!isLoading && availableProjects.length === 0 && projectId) {
             // Projects loaded, but none found (e.g. after a refresh and store is initially empty before fetch)
             // or projectId is simply invalid before projects are even fetched.
             // This case might lead to "Not Found" if projects list remains empty.
             // If fetchAvailableProjects is not called, this might be an issue.
             // For now, if availableProjects is empty and not loading, assume not found.
            setCurrentProject(null);
          }
          // If projects are still loading, currentProject remains undefined until loading finishes.
        }
      }
    }
  }, [projectId, availableProjects, activeProjectDetails, setActiveProject, isLoading]);

  if (isLoading && currentProject === undefined) {
    return <div className="p-6 text-center"><p className="text-slate-600 dark:text-slate-400">Loading project details...</p></div>;
  }

  if (currentProject === null) { // Explicitly null means not found after loading or initial check
    return (
      <div className="p-6 text-center">
        <h1 className="text-xl font-semibold text-red-600 dark:text-red-400">Project Not Found</h1>
        <p className="text-slate-600 dark:text-slate-400 mt-2">The project ID '{projectId}' does not correspond to an existing project or you may not have access.</p>
        <Button variant="outline-slate" onClick={() => navigate('/')} iconLeft={<PiArrowLeftDuotone />} className="mt-6">
          Back to Dashboard
        </Button>
      </div>
    );
  }
  
  if (!currentProject) { // Still undefined or falsy, possibly initial load or error before currentProject is set
     return <div className="p-6 text-center"><p className="text-slate-600 dark:text-slate-400">Loading project information...</p></div>;
  }

  const projectActions = [
    { id: 'enterData', label: 'Enter Data', icon: PiClipboardTextDuotone, path: '/forms', variant: 'primary' as const, className: "dark:shadow-blue-500/30" },
    { id: 'reports', label: 'View Reports', icon: PiChartLineUpDuotone, path: `/project/${projectId}/reports`, variant: 'outline-slate' as const },
    { id: 'discussions', label: 'Discussions', icon: PiChatDotsDuotone, path: `/project/${projectId}/discussions`, variant: 'outline-slate' as const },
    { id: 'settings', label: 'Project Settings', icon: PiGearDuotone, path: `/project/${projectId}/settings`, variant: 'outline-slate' as const },
  ];

  return (
    <div className="p-4 sm:p-6 space-y-8 bg-gradient-to-br from-slate-50 via-blue-50/30 to-purple-50/30 dark:from-slate-900 dark:via-slate-900 dark:to-slate-900 min-h-full max-w-6xl mx-auto w-full">
      {/* Back to Dashboard Button - outside the main banner for cleaner separation */}
      <div className="mb-0">
        <Button 
          variant="ghost" 
          size="sm" 
          onClick={() => navigate('/')} 
          iconLeft={<PiArrowLeftDuotone />} 
          className="text-slate-600 hover:text-slate-800 dark:text-slate-300 dark:hover:text-slate-100 px-1 py-1"
        >
          Back to Dashboard
        </Button>
      </div>

      {/* Main Project Info Banner Card - Inspired by DashboardGreetingCard */}
      <section 
        className="relative card-base p-6 sm:p-8 rounded-xl shadow-lg 
                   border border-slate-200 dark:border-slate-700/80 overflow-hidden
                   bg-gradient-to-br from-slate-50 via-white to-slate-50 
                   dark:from-slate-800 dark:via-slate-700 dark:to-slate-800 
                   dark:shadow-[0_0_25px_rgba(var(--color-primary-500),0.15)]"
      >
        {/* Optional decorative blurs, can be fine-tuned or removed */}
        <div className="absolute -top-1/4 -left-1/4 w-1/2 h-1/2 bg-sky-400/20 dark:bg-sky-500/15 rounded-full filter blur-3xl opacity-40 animate-pulse"></div>
        <div className="absolute -bottom-1/4 -right-1/4 w-1/2 h-1/2 bg-indigo-400/20 dark:bg-indigo-500/15 rounded-full filter blur-3xl opacity-40 animation-delay-2000 animate-pulse"></div>
        
        <div className="relative z-10">
          <h1 className="text-3xl md:text-4xl font-bold text-gradient">
            {currentProject.name}
          </h1>
          <p className="mt-2 text-slate-600 dark:text-slate-300 text-lg max-w-3xl">
            {currentProject.description || 'No detailed description provided for this project.'}
          </p>

          {/* Project Actions Bar */}
          <div className="mt-6 pt-6 border-t border-slate-200 dark:border-slate-700/60 flex flex-wrap gap-3 items-center">
            {projectActions.map(action => (
              <Button 
                key={action.id}
                variant={action.variant}
                size='md' 
                onClick={() => navigate(action.path)} 
                iconLeft={<action.icon />}
                className={action.className || 'dark:border-slate-600 dark:hover:bg-slate-700 hover:border-slate-400'}
              >
                {action.label}
              </Button>
            ))}
          </div>
        </div>
      </section>

      {/* Grid for Team Members and Other Info */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <section id="team-members" className="lg:col-span-2 card-base p-6 rounded-lg">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold text-slate-700 dark:text-slate-200 flex items-center">
              <PiUsersDuotone className="mr-2.5 text-2xl text-sky-500 dark:text-sky-400"/> Team Members
            </h2>
            <Button variant='outline-primary' size='sm' iconLeft={<PiUserCirclePlusDuotone/>}>
              Manage Team (TBD)
            </Button>
          </div>
          <div className="space-y-4">
            {currentProject && currentProject.members && currentProject.members.length > 0 ? (
              currentProject.members.map(member => (
                // TODO: Enhance this to show richer member details if available from another store (e.g., userStore)
                // For now, displaying userId and roles.
                <div 
                  key={member.userId} 
                  className={`p-4 rounded-md border dark:border-slate-700 flex items-start space-x-4 
                              bg-white dark:bg-slate-800/60 hover:shadow-sm dark:hover:bg-slate-700/70 
                              border-slate-200 dark:border-slate-700`}
                >
                  <img 
                    src={`https://ui-avatars.com/api/?name=${encodeURIComponent(member.userId)}&background=random&size=48&color=fff&font-size=0.40&bold=true`}
                    alt={member.userId} 
                    className="w-12 h-12 rounded-full flex-shrink-0 object-cover ring-1 ring-slate-300 dark:ring-slate-600 shadow-sm"
                  />
                  <div className="flex-1 min-w-0">
                    <h3 className="text-md font-semibold text-slate-800 dark:text-slate-100">User ID: {member.userId}</h3>
                    <p className={`text-xs font-medium px-1.5 py-0.5 rounded-full inline-block mt-0.5 mb-1 bg-slate-100 text-slate-600 dark:bg-slate-600 dark:text-slate-300`}>
                      Roles: {member.roles.join(', ') || 'No roles assigned'}
                    </p>
                    {/* Placeholder for more details */}
                    {/* <p className="text-sm text-slate-500 dark:text-slate-400 truncate">Additional details (e.g., email) would go here.</p> */}
                  </div>
                </div>
              ))
            ) : (
              <p className="text-slate-500 dark:text-slate-400">No team members listed for this project yet.</p>
            )}
          </div>
        </section>

        <aside className="lg:col-span-1 space-y-6">
          <section id="project-status" className="card-base p-6 rounded-lg">
            <h2 className="text-xl font-semibold text-slate-700 dark:text-slate-200 flex items-center mb-3">
                <PiHourglassDuotone className="mr-2.5 text-2xl text-amber-500 dark:text-amber-400"/> Project Status
            </h2>
            <p className="text-sm text-slate-500 dark:text-slate-400">Details about project milestones, current phase, data collection progress, etc. (Placeholder)</p>
          </section>

          <section id="recent-activity" className="card-base p-6 rounded-lg">
            <h2 className="text-xl font-semibold text-slate-700 dark:text-slate-200 flex items-center mb-3">
                <PiMegaphoneDuotone className="mr-2.5 text-2xl text-teal-500 dark:text-teal-400"/> Recent Activity
            </h2>
            <ul className="space-y-2 text-sm">
              <li className="text-slate-600 dark:text-slate-300">User 'Dr. Alice' updated project description. <span className="text-xs text-slate-400 dark:text-slate-500">(Placeholder)</span></li>
              <li className="text-slate-600 dark:text-slate-300">Form 'Pre-Op Assessment v2' was activated. <span className="text-xs text-slate-400 dark:text-slate-500">(Placeholder)</span></li>
            </ul>
          </section>

          <section id="project-goals" className="card-base p-6 rounded-lg">
            <h2 className="text-xl font-semibold text-slate-700 dark:text-slate-200 flex items-center mb-4">
              <PiFlagDuotone className="mr-2.5 text-2xl text-green-500 dark:text-green-400" /> Project Goals
            </h2>
            <p className="text-sm text-slate-600 dark:text-slate-300">
              {currentProject?.goals || 'Specific research objectives and aims of this project will be detailed here. This section can be populated from project settings.'}
            </p>
            {/* Example: <ul className="list-disc list-inside space-y-1 text-sm text-slate-600 dark:text-slate-300"><li>Goal 1</li><li>Goal 2</li></ul> */} 
          </section>

          <section id="key-documents" className="card-base p-6 rounded-lg">
            <h2 className="text-xl font-semibold text-slate-700 dark:text-slate-200 flex items-center mb-3">
                <PiFileTextDuotone className="mr-2.5 text-2xl text-purple-500 dark:text-purple-400"/> Key Documents
            </h2>
            <p className="text-sm text-slate-500 dark:text-slate-400">Documents related to this project, such as protocols, consent forms, and project reports.</p>
          </section>
        </aside>
      </div>
    </div>
  );
};

export default ProjectDetailsPage;


###############################################################################
### FILE: pages/RoleEditorPage.tsx
###############################################################################
import React, { useState } from 'react';
import SectionCard from '../components/ui/SectionCard';
import InputField from '../components/ui/InputField';

// --- Mock Data & Types ---
type Permission = 'can_submit_forms' | 'can_view_submissions' | 'can_edit_project_settings' | 'can_manage_users' | 'can_build_forms';

interface Role {
  id: string;
  name: string;
  description: string;
  permissions: Permission[];
}

const MOCK_PERMISSIONS_LIST: { id: Permission, label: string }[] = [
  { id: 'can_submit_forms', label: 'Submit Forms' },
  { id: 'can_view_submissions', label: 'View Submissions' },
  { id: 'can_edit_project_settings', label: 'Edit Project Settings' },
  { id: 'can_manage_users', label: 'Manage Users' },
  { id: 'can_build_forms', label: 'Build Forms' },
];

const initialRoles: Role[] = [
  { id: '1', name: 'Researcher', description: 'Can submit forms and view submissions.', permissions: ['can_submit_forms', 'can_view_submissions'] },
  { id: '2', name: 'Project Admin', description: 'Full control over the project.', permissions: ['can_submit_forms', 'can_view_submissions', 'can_edit_project_settings', 'can_manage_users', 'can_build_forms'] },
  { id: '3', name: 'Data Entry Clerk', description: 'Can only submit forms.', permissions: ['can_submit_forms'] },
];

// --- RoleEditorPage Component ---
const RoleEditorPage: React.FC = () => {
  const [roles, setRoles] = useState<Role[]>(initialRoles);
  const [selectedRole, setSelectedRole] = useState<Role | null>(null);
  
  const [newRoleName, setNewRoleName] = useState('');
  const [newRoleDescription, setNewRoleDescription] = useState('');
  const [newRolePermissions, setNewRolePermissions] = useState<Permission[]>([]);

  const [isCreatingNewRole, setIsCreatingNewRole] = useState(false);

  const handleSelectRole = (role: Role) => {
    setSelectedRole(role);
    setNewRoleName(role.name);
    setNewRoleDescription(role.description);
    setNewRolePermissions([...role.permissions]);
    setIsCreatingNewRole(false);
  };

  const handlePermissionToggle = (permissionId: Permission) => {
    setNewRolePermissions(prev => 
      prev.includes(permissionId) 
        ? prev.filter(p => p !== permissionId)
        : [...prev, permissionId]
    );
  };

  const handleSaveRole = () => {
    if (!newRoleName.trim()) {
      alert('Role name cannot be empty.');
      return;
    }
    if (isCreatingNewRole) {
      const newRole: Role = {
        id: String(Date.now()), // Simple unique ID for mock
        name: newRoleName,
        description: newRoleDescription,
        permissions: [...newRolePermissions],
      };
      setRoles(prev => [...prev, newRole]);
      alert(`Role '${newRole.name}' created successfully!`);
    } else if (selectedRole) {
      setRoles(prev => prev.map(r => 
        r.id === selectedRole.id 
          ? { ...r, name: newRoleName, description: newRoleDescription, permissions: [...newRolePermissions] } 
          : r
      ));
      alert(`Role '${newRoleName}' updated successfully!`);
    }
    // Reset form
    setSelectedRole(null);
    setNewRoleName('');
    setNewRoleDescription('');
    setNewRolePermissions([]);
    setIsCreatingNewRole(false);
  };

  const handleStartCreateNewRole = () => {
    setSelectedRole(null);
    setNewRoleName('');
    setNewRoleDescription('');
    setNewRolePermissions([]);
    setIsCreatingNewRole(true);
  };
  
  const handleCancelEdit = () => {
    setSelectedRole(null);
    setNewRoleName('');
    setNewRoleDescription('');
    setNewRolePermissions([]);
    setIsCreatingNewRole(false);
  };

  return (
    <div className="p-1">
      <h1 className="text-2xl font-semibold text-slate-800 dark:text-slate-100 mb-4">Role Editor (MVP 1)</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Column 1: Role List */} 
        <SectionCard title="Project Roles" className="md:col-span-1">
          <button 
            onClick={handleStartCreateNewRole}
            className="w-full mb-3 px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white font-semibold rounded-md shadow-sm transition-colors text-sm"
          >
            + Create New Role
          </button>
          {roles.length === 0 && <p className="text-sm text-slate-500 dark:text-slate-400">No roles defined yet.</p>}
          <ul className="space-y-2">
            {roles.map(role => (
              <li key={role.id}>
                <button 
                  onClick={() => handleSelectRole(role)}
                  className={`w-full text-left p-2.5 rounded-md transition-colors text-sm 
                              ${selectedRole?.id === role.id 
                                ? 'bg-blue-100 dark:bg-blue-700/50 text-blue-700 dark:text-blue-300 font-semibold' 
                                : 'bg-slate-50 dark:bg-slate-700/30 hover:bg-slate-100 dark:hover:bg-slate-600/50'}`}
                >
                  {role.name}
                </button>
              </li>
            ))}
          </ul>
        </SectionCard>

        {/* Column 2: Role Editor/Creator Form */} 
        {(selectedRole || isCreatingNewRole) && (
          <SectionCard title={isCreatingNewRole ? "Create New Role" : `Edit Role: ${selectedRole?.name}`} className="md:col-span-2">
            <div className="space-y-4">
              <InputField
                id="roleName"
                label="Role Name"
                type="text"
                value={newRoleName}
                onChange={(e) => setNewRoleName(e.target.value)}
                required
                className="mb-0"
              />
              <div>
                <label htmlFor="roleDescription" className="block text-sm font-medium text-slate-700 dark:text-slate-200 mb-1">Description</label>
                <textarea 
                  id="roleDescription"
                  value={newRoleDescription}
                  onChange={(e) => setNewRoleDescription(e.target.value)}
                  rows={3}
                  className="mt-1 block w-full px-3 py-2 border rounded-md text-sm shadow-sm bg-white dark:bg-slate-800/50 border-slate-300 dark:border-slate-600 text-slate-900 dark:text-slate-100 focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
                  placeholder="Briefly describe this role..."
                />
              </div>
              
              <div>
                <h4 className="text-sm font-medium text-slate-700 dark:text-slate-200 mb-2">Permissions:</h4>
                <div className="space-y-1.5">
                  {MOCK_PERMISSIONS_LIST.map(perm => (
                    <label key={perm.id} className="flex items-center space-x-2 cursor-pointer">
                      <input 
                        type="checkbox"
                        checked={newRolePermissions.includes(perm.id)}
                        onChange={() => handlePermissionToggle(perm.id)}
                        className="h-4 w-4 rounded text-blue-600 dark:text-blue-500 border-slate-300 dark:border-slate-500 focus:ring-blue-500 dark:focus:ring-offset-slate-800"
                      />
                      <span className="text-sm text-slate-700 dark:text-slate-300">{perm.label}</span>
                    </label>
                  ))}
                </div>
              </div>

              <div className="flex justify-end space-x-3 pt-3 border-t border-slate-200 dark:border-slate-600/50">
                <button 
                  onClick={handleCancelEdit}
                  className="px-4 py-2 text-sm bg-slate-200 hover:bg-slate-300 dark:bg-slate-600 dark:hover:bg-slate-500 text-slate-700 dark:text-slate-200 font-medium rounded-md shadow-sm transition-colors"
                >
                  Cancel
                </button>
                <button 
                  onClick={handleSaveRole}
                  className="px-4 py-2 text-sm bg-green-500 hover:bg-green-600 text-white font-semibold rounded-md shadow-sm transition-colors"
                >
                  {isCreatingNewRole ? "Create Role" : "Save Changes"}
                </button>
              </div>
            </div>
          </SectionCard>
        )}
         {!selectedRole && !isCreatingNewRole && (
            <div className="md:col-span-2 flex items-center justify-center p-8 bg-white dark:bg-slate-800 rounded-lg shadow">
                <p className="text-slate-500 dark:text-slate-400">Select a role to edit or create a new one.</p>
            </div>
        )}
      </div>
    </div>
  );
};

export default RoleEditorPage; 


###############################################################################
### FILE: pages/SettingsPage.tsx
###############################################################################
import React from 'react';
import { PiGearDuotone, PiUserDuotone, PiBellDuotone, PiPaletteDuotone } from 'react-icons/pi';

const SettingsPage: React.FC = () => {
  return (
    <div className="p-4 sm:p-6 space-y-8 bg-gradient-to-br from-slate-50 via-blue-50/30 to-purple-50/30 dark:from-slate-900 dark:via-slate-900 dark:to-slate-900 min-h-full max-w-4xl mx-auto">
      <div className="text-center mb-8">
        <h1 className="text-3xl md:text-4xl font-bold text-gradient mb-2">Settings</h1>
        <p className="text-slate-600 dark:text-slate-300 text-lg">Manage your CREST profile, preferences, and application settings.</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* User Profile Card */}
        <section className="card-colorful p-6 rounded-xl shadow-lg">
          <h2 className="text-xl font-semibold text-blue-600 dark:text-blue-400 flex items-center mb-4 relative z-10">
            <PiUserDuotone className="mr-3 text-2xl text-blue-600 dark:text-blue-400" /> User Profile
          </h2>
          <div className="space-y-3 relative z-10">
            <p className="text-slate-600 dark:text-slate-300">Edit your profile information, contact details, and professional credentials.</p>
            <div className="pt-3 space-y-2">
              <div className="flex justify-between items-center py-2 border-b border-slate-200/50 dark:border-slate-700/50">
                <span className="text-sm font-medium text-slate-700 dark:text-slate-200">Name</span>
                <span className="text-sm text-slate-500 dark:text-slate-400">Dr. João Silva</span>
              </div>
              <div className="flex justify-between items-center py-2 border-b border-slate-200/50 dark:border-slate-700/50">
                <span className="text-sm font-medium text-slate-700 dark:text-slate-200">Email</span>
                <span className="text-sm text-slate-500 dark:text-slate-400">joao.silva@hospital.com</span>
              </div>
              <div className="flex justify-between items-center py-2">
                <span className="text-sm font-medium text-slate-700 dark:text-slate-200">Institution</span>
                <span className="text-sm text-slate-500 dark:text-slate-400">Hospital Universitário</span>
              </div>
            </div>
          </div>
        </section>

        {/* Preferences Card */}
        <section className="card-colorful p-6 rounded-xl shadow-lg">
          <h2 className="text-xl font-semibold text-purple-600 dark:text-purple-400 flex items-center mb-4 relative z-10">
            <PiPaletteDuotone className="mr-3 text-2xl text-purple-600 dark:text-purple-400" /> Appearance
          </h2>
          <div className="space-y-3 relative z-10">
            <p className="text-slate-600 dark:text-slate-300">Customize your interface appearance and theme settings.</p>
            <div className="pt-3 space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-sm font-medium text-slate-700 dark:text-slate-200">Theme</span>
                <div className="flex items-center space-x-2">
                  <button className="px-3 py-1 text-xs bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-full">Light</button>
                  <button className="px-3 py-1 text-xs bg-slate-200 dark:bg-slate-700 text-slate-600 dark:text-slate-300 rounded-full">Dark</button>
                </div>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm font-medium text-slate-700 dark:text-slate-200">Language</span>
                <span className="text-sm text-slate-500 dark:text-slate-400">Portuguese (BR)</span>
              </div>
            </div>
          </div>
        </section>

        {/* Notifications Card */}
        <section className="card-colorful p-6 rounded-xl shadow-lg">
          <h2 className="text-xl font-semibold text-emerald-600 dark:text-emerald-400 flex items-center mb-4 relative z-10">
            <PiBellDuotone className="mr-3 text-2xl text-emerald-600 dark:text-emerald-400" /> Notifications
          </h2>
          <div className="space-y-3 relative z-10">
            <p className="text-slate-600 dark:text-slate-300">Configure when and how you receive notifications from CREST.</p>
            <div className="pt-3 space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-sm font-medium text-slate-700 dark:text-slate-200">Email Notifications</span>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" className="sr-only peer" defaultChecked />
                  <div className="w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-slate-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-slate-600 peer-checked:bg-blue-600"></div>
                </label>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm font-medium text-slate-700 dark:text-slate-200">Follow-up Reminders</span>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" className="sr-only peer" defaultChecked />
                  <div className="w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-slate-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-slate-600 peer-checked:bg-blue-600"></div>
                </label>
              </div>
            </div>
          </div>
        </section>

        {/* System Information Card */}
        <section className="card-colorful p-6 rounded-xl shadow-lg">
          <h2 className="text-xl font-semibold text-slate-600 dark:text-slate-400 flex items-center mb-4 relative z-10">
            <PiGearDuotone className="mr-3 text-2xl text-slate-600 dark:text-slate-400" /> System Information
          </h2>
          <div className="space-y-3 relative z-10">
            <p className="text-slate-600 dark:text-slate-300">Information about your CREST installation and current session.</p>
            <div className="pt-3 space-y-2">
              <div className="flex justify-between items-center py-2 border-b border-slate-200/50 dark:border-slate-700/50">
                <span className="text-sm font-medium text-slate-700 dark:text-slate-200">Version</span>
                <span className="text-sm text-slate-500 dark:text-slate-400">1.0.0-beta</span>
              </div>
              <div className="flex justify-between items-center py-2 border-b border-slate-200/50 dark:border-slate-700/50">
                <span className="text-sm font-medium text-slate-700 dark:text-slate-200">Last Login</span>
                <span className="text-sm text-slate-500 dark:text-slate-400">2024-01-15 09:30</span>
              </div>
              <div className="flex justify-between items-center py-2">
                <span className="text-sm font-medium text-slate-700 dark:text-slate-200">Session Status</span>
                <span className="text-xs px-2 py-1 bg-emerald-100 dark:bg-emerald-900/30 text-emerald-700 dark:text-emerald-300 rounded-full">Active</span>
              </div>
            </div>
          </div>
        </section>
      </div>
    </div>
  );
};

export default SettingsPage; 


###############################################################################
### FILE: pages/TestIntraoperatoriaFormPage.tsx
###############################################################################
import React, { useState } from 'react';
import DynamicFormRenderer from '../components/forms/DynamicFormRenderer';
import SectionCard from '../components/ui/SectionCard'; // Assuming SectionCard can be used for layout

// Import the schemas
import intraoperatoriaSchema from '../schemas/intraoperatoria.schema.json';
import intraoperatoriaUiSchema from '../schemas/intraoperatoria.uiSchema.json';

const initialIntraOpFormData = {
  procedimento: null,
  tipoAnestesia: null,
  farmacosInducao: { selectedDrugs: {}, drugValues: {} },
  farmacosManutencao: { selectedDrugs: {}, drugValues: {} },
  farmacosAdjuvantes: { selectedDrugs: {}, drugValues: {} },
  sintomaticos: { selectedDrugs: {}, drugValues: {} }, // Matches schema key
  suporteOxigenioSelecionado: [],
  suporteVentilatorioSelecionado: [],
  nivelDessaturacao: null,
  outrasIntercorrencias: [],
};

const TestIntraoperatoriaFormPage: React.FC = () => {
  const [formData, setFormData] = useState<any>(initialIntraOpFormData);

  const handleFormDataChange = (updatedData: any) => {
    setFormData(updatedData);
  };

  return (
    <div className="container mx-auto p-4">
      <SectionCard title="Test Dynamic Form - Intraoperatória">
        <DynamicFormRenderer
          schema={intraoperatoriaSchema}
          uiSchema={intraoperatoriaUiSchema}
          formData={formData}
          onFormDataChange={handleFormDataChange}
        />
        <div className="mt-6 p-3 bg-slate-100 rounded text-xs overflow-x-auto">
          <strong className='block mb-1'>Live FormData State:</strong>
          <pre>{JSON.stringify(formData, null, 2)}</pre>
        </div>
      </SectionCard>
    </div>
  );
};

export default TestIntraoperatoriaFormPage; 


###############################################################################
### FILE: pages/TestPreAnestesiaFormPage.tsx
###############################################################################
import React, { useState } from 'react';
import DynamicFormRenderer from '../components/forms/DynamicFormRenderer';
import schema from '../schemas/preAnestesia.schema.json';
import uiSchema from '../schemas/preAnestesia.uiSchema.json';
import SectionCard from '../components/ui/SectionCard';

// formData for PreAnestesia is largely handled by AutocompleteTagSelectorWidget 
// which imports options directly based on uiSchema's 'ui:options': { optionsKey: '...' }
// So, formDataSources prop might not be strictly needed here unless other widgets require it.

const TestPreAnestesiaFormPage: React.FC = () => {
  const [currentFormData, setCurrentFormData] = useState<any>({});

  const handleFormDataChange = (updatedData: any) => {
    setCurrentFormData(updatedData);
  };

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    console.log('Submitting PreAnestesia Form Data:', currentFormData);
    alert('PreAnestesia form submitted! Check console for data.');
  };

  return (
    <div className="p-4 bg-gray-100 min-h-screen">
      <SectionCard title="Teste do Formulário Dinâmico: Pré-Anestesia">
        <form onSubmit={handleSubmit}>
          <DynamicFormRenderer
            schema={schema as any}
            uiSchema={uiSchema as any}
            formData={currentFormData}
            onFormDataChange={handleFormDataChange}
          />
          <div className="mt-6">
            <button 
              type="submit"
              className="px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-colors duration-150"
            >
              Salvar Pré-Anestesia (Teste)
            </button>
          </div>
        </form>
      </SectionCard>
    </div>
  );
};

export default TestPreAnestesiaFormPage; 


###############################################################################
### FILE: pages/TestRecuperacaoFormPage.tsx
###############################################################################
import React, { useState } from 'react';
import DynamicFormRenderer from '../components/forms/DynamicFormRenderer';
import SectionCard from '../components/ui/SectionCard'; // Assuming SectionCard can be used for layout

// Import the schemas
import recuperacaoSchema from '../schemas/recuperacaoPosAnestesica.schema.json';
import recuperacaoUiSchema from '../schemas/recuperacaoPosAnestesica.uiSchema.json';

const TestRecuperacaoFormPage: React.FC = () => {
  const [formData, setFormData] = useState<any>({
    tempoRecuperacao: null,       // Initial value from schema (or default)
    nivelDessaturacaoPos: null,   // Initial value from schema (or default)
    outrasQueixasPos: [],         // Initial value for array type
  });

  const handleFormDataChange = (updatedData: any) => {
    setFormData(updatedData);
  };

  return (
    <div className="container mx-auto p-4">
      <SectionCard title="Test Dynamic Form - Recuperação Pós-Anestésica">
        <DynamicFormRenderer
          schema={recuperacaoSchema}
          uiSchema={recuperacaoUiSchema}
          formData={formData}
          onFormDataChange={handleFormDataChange}
        />
        <div className="mt-6 p-3 bg-slate-100 rounded text-xs overflow-x-auto">
          <strong className='block mb-1'>Live FormData State:</strong>
          <pre>{JSON.stringify(formData, null, 2)}</pre>
        </div>
      </SectionCard>
    </div>
  );
};

export default TestRecuperacaoFormPage; 


###############################################################################
### FILE: schemas/intraoperatoria.schema.json
###############################################################################
{
  "title": "Intraoperatória",
  "description": "Schema for the Intraoperative form details.",
  "type": "object",
  "properties": {
    "procedimento": {
      "type": ["string", "null"],
      "title": "Procedimento",
      "enum": [null, "broncoscopia_flexivel", "broncoscopia_rigida", "traqueoscopia", "dilatacao_traqueal", "traqueoplastia"],
      "enumNames": ["Selecione...", "Broncoscopia flexível", "Broncoscopia rígida", "Traqueoscopia", "Dilatação Traqueal", "Traqueoplastia"]
    },
    "tipoAnestesia": {
      "type": ["string", "null"],
      "title": "Anestesia",
      "enum": [null, "geral", "sedacao_profunda"],
      "enumNames": ["Selecione...", "Geral", "Sedação Profunda"]
    },
    "farmacosInducao": {
      "type": "object",
      "title": "Fármacos para Indução",
      "properties": {
        "selectedDrugs": {
          "type": "object",
          "description": "Tracks which induction drugs are selected.",
          "additionalProperties": { "type": "boolean" }
        },
        "drugValues": {
          "type": "object",
          "description": "Stores values for selected induction drugs.",
          "additionalProperties": { "type": ["string", "number", "null"] }
        }
      },
      "default": { "selectedDrugs": {}, "drugValues": {} }
    },
    "farmacosManutencao": {
      "type": "object",
      "title": "Fármacos para Manutenção",
      "properties": {
        "selectedDrugs": {
          "type": "object",
          "additionalProperties": { "type": "boolean" }
        },
        "drugValues": {
          "type": "object",
          "additionalProperties": { "type": ["string", "number", "null"] }
        }
      },
      "default": { "selectedDrugs": {}, "drugValues": {} }
    },
    "farmacosAdjuvantes": {
      "type": "object",
      "title": "Fármacos Adjuvantes",
      "properties": {
        "selectedDrugs": {
          "type": "object",
          "additionalProperties": { "type": "boolean" }
        },
        "drugValues": {
          "type": "object",
          "additionalProperties": { "type": ["string", "number", "null"] }
        }
      },
      "default": { "selectedDrugs": {}, "drugValues": {} }
    },
    "sintomaticos": {
      "type": "object",
      "title": "Sintomáticos",
      "properties": {
        "selectedDrugs": {
          "type": "object",
          "additionalProperties": { "type": "boolean" }
        },
        "drugValues": {
          "type": "object",
          "additionalProperties": { "type": ["string", "number", "null"] }
        }
      },
      "default": { "selectedDrugs": {}, "drugValues": {} }
    },
    "suporteOxigenioSelecionado": {
      "type": "array",
      "title": "Suporte de Oxigênio",
      "items": {
        "type": "string",
        "enum": ["cateter_nasal", "sonda_aspiracao_periglotica"],
        "enumNames": ["Cateter nasal", "Sonda de aspiração periglótica"]
      },
      "uniqueItems": true,
      "default": []
    },
    "suporteVentilatorioSelecionado": {
      "type": "array",
      "title": "Suporte Ventilatório",
      "items": {
        "type": "string",
        "enum": ["mascara_laringea", "tubo_orotraqueal"],
        "enumNames": ["Máscara laríngea", "Tubo orotraqueal"]
      },
      "uniqueItems": true,
      "default": []
    },
    "nivelDessaturacao": {
      "type": ["string", "null"],
      "title": "Nível de Dessaturação (se ocorrido)",
      "enum": [null, "dessaturacao_85_92", "dessaturacao_75_85", "dessaturacao_lt_70"],
      "enumNames": ["Nenhum", "Dessaturação (85-92%)", "Dessaturação (75-85%)", "Dessaturação (<70%)"]
    },
    "outrasIntercorrencias": {
      "type": "array",
      "title": "Outras Intercorrências",
      "items": {
        "type": "string",
        "enum": ["broncoespasmo", "laringoespasmo", "sangramento", "reflexo_tosse_nao_abolido"],
        "enumNames": ["Broncoespasmo", "Laringoespasmo", "Sangramento", "Reflexo de tosse não abolido"]
      },
      "uniqueItems": true,
      "default": []
    }
  },
  "required": [
    "procedimento",
    "tipoAnestesia"
  ]
} 


###############################################################################
### FILE: schemas/intraoperatoria.uiSchema.json
###############################################################################
{
  "procedimento": {
    "ui:widget": "SelectFieldWidget",
    "ui:options": {
      "placeholder": "Selecione..."
    }
  },
  "tipoAnestesia": {
    "ui:widget": "SelectFieldWidget",
    "ui:options": {
      "placeholder": "Selecione..."
    }
  },
  "farmacosInducao": {
    "ui:widget": "DrugSectionWidget",
    "ui:options": {
      "drugListKey": "inductionDrugsList",
      "sectionTitle": "Fármacos para Indução" 
    }
  },
  "farmacosManutencao": {
    "ui:widget": "DrugSectionWidget",
    "ui:options": {
      "drugListKey": "maintenanceDrugsList",
      "sectionTitle": "Fármacos para Manutenção"
    }
  },
  "farmacosAdjuvantes": {
    "ui:widget": "DrugSectionWidget",
    "ui:options": {
      "drugListKey": "adjuvantDrugsList",
      "sectionTitle": "Fármacos Adjuvantes"
    }
  },
  "sintomaticos": {
    "ui:widget": "DrugSectionWidget",
    "ui:options": {
      "drugListKey": "symptomaticDrugsList",
      "sectionTitle": "Sintomáticos"
    }
  },
  "suporteOxigenioSelecionado": {
    "ui:widget": "CheckboxGroupField",
    "ui:options": { 
      "optionsSourceKey": "oxigenioOptions" 
    }
  },
  "suporteVentilatorioSelecionado": {
    "ui:widget": "CheckboxGroupField",
    "ui:options": { 
      "optionsSourceKey": "ventilatorioOptions" 
    }
  },
  "nivelDessaturacao": {
    "ui:widget": "RadioButtonGroupField",
    "ui:options": { 
      "optionsSourceKey": "dessaturacaoOptions" 
    }
  },
  "outrasIntercorrencias": {
    "ui:widget": "CheckboxGroupField",
    "ui:options": { 
      "optionsSourceKey": "outrasIntercorrenciasOptions" 
    }
  }
} 


###############################################################################
### FILE: schemas/preAnestesia.schema.json
###############################################################################
{
  "title": "Avaliação Pré-Anestésica",
  "description": "Schema for the Pre-Anesthetic Assessment form.",
  "type": "object",
  "properties": {
    "idade": {
      "type": "number",
      "title": "Idade"
    },
    "peso": {
      "type": "number",
      "title": "Peso (kg)"
    },
    "sexo": {
      "type": "string",
      "title": "Sexo",
      "enum": [null, "F", "M"],
      "enumNames": ["Selecione...", "Feminino", "Masculino"]
    },
    "diagnosticos": {
      "type": "array",
      "title": "Diagnóstico(s)",
      "items": {
        "type": "object",
        "properties": {
          "value": { "type": "string" },
          "label": { "type": "string" },
          "icd10": { "type": "string" }
        },
        "required": ["value", "label"]
      },
      "uniqueItems": true
    },
    "comorbidades": {
      "type": "array",
      "title": "Comorbidade(s)",
      "items": {
        "type": "object",
        "properties": {
          "value": { "type": "string" },
          "label": { "type": "string" }
        },
        "required": ["value", "label"]
      },
      "uniqueItems": true
    },
    "queixas": {
      "type": "array",
      "title": "Queixa(s)",
      "items": {
        "type": "object",
        "properties": {
          "value": { "type": "string" },
          "label": { "type": "string" }
        },
        "required": ["value", "label"]
      },
      "uniqueItems": true
    }
  },
  "required": [
    "idade",
    "peso",
    "sexo"
  ]
} 


###############################################################################
### FILE: schemas/preAnestesia.uiSchema.json
###############################################################################
{
  "idade": {
    "ui:widget": "InputFieldWidget",
    "ui:options": {
      "inputType": "number",
      "placeholder": "Ex: 3"
    }
  },
  "peso": {
    "ui:widget": "InputFieldWidget",
    "ui:options": {
      "inputType": "number",
      "placeholder": "Ex: 14.5"
    }
  },
  "sexo": {
    "ui:widget": "SelectFieldWidget",
    "ui:options": {
      "placeholder": "Selecione..."
    }
  },
  "diagnosticos": {
    "ui:widget": "AutocompleteTagSelectorWidget",
    "ui:options": {
      "placeholder": "Digite nome ou código ICD...",
      "commonOptionsKey": "commonDiagnoses",
      "allOptionsKey": "allDiagnosesSample",
      "quickSelectLabel": "Comuns:",
      "searchLabel": "Buscar Outro Diagnóstico (Simulado):",
      "selectedLabel": "Selecionados:"
    }
  },
  "comorbidades": {
    "ui:widget": "AutocompleteTagSelectorWidget",
    "ui:options": {
      "placeholder": "Digite para buscar...",
      "commonOptionsKey": "commonComorbidades",
      "allOptionsKey": "allComorbidadesSample",
      "quickSelectLabel": "Comuns:",
      "searchLabel": "Buscar Outra Comorbidade (Simulada):",
      "selectedLabel": "Selecionadas:"
    }
  },
  "queixas": {
    "ui:widget": "AutocompleteTagSelectorWidget",
    "ui:options": {
      "placeholder": "Digite para buscar...",
      "commonOptionsKey": "commonQueixas",
      "allOptionsKey": "allQueixasSample",
      "quickSelectLabel": "Comuns:",
      "searchLabel": "Buscar Outra Queixa (Simulada):",
      "selectedLabel": "Selecionadas:"
    }
  }
} 


###############################################################################
### FILE: schemas/recuperacaoPosAnestesica.schema.json
###############################################################################
{
  "title": "Recuperação Pós-Anestésica",
  "description": "Schema for the Post-Anesthetic Recovery form.",
  "type": "object",
  "properties": {
    "tempoRecuperacao": {
      "type": ["string", "null"],
      "title": "Tempo de Recuperação (Aldrette > 9)",
      "enum": [null, "ate_30", "ate_45", "entre_45_60", "mais_60"],
      "enumNames": ["Selecione...", "Até 30 minutos", "Até 45 minutos", "Entre 45-60 minutos", "> 60 minutos"]
    },
    "nivelDessaturacaoPos": {
      "type": ["string", "null"],
      "title": "Nível de Dessaturação (se ocorrido)",
      "enum": [null, "dessaturacao_85_92", "dessaturacao_75_85", "dessaturacao_lt_70"],
      "enumNames": ["Nenhum", "Dessaturação (85-92%)", "Dessaturação (75-85%)", "Dessaturação (<70%)"]
    },
    "outrasQueixasPos": {
      "type": "array",
      "title": "Outras Ocorrências/Queixas",
      "items": {
        "type": "string",
        "enum": [
          "broncoespasmo",
          "laringoespasmo",
          "sangramento",
          "tosse",
          "dor",
          "vomitos",
          "prurido",
          "sialorreia"
        ],
        "enumNames": [
          "Broncoespasmo",
          "Laringoespasmo",
          "Sangramento",
          "Tosse",
          "Dor",
          "Vômitos",
          "Prurido",
          "Sialorreia"
        ]
      },
      "uniqueItems": true
    }
  },
  "required": [
    "tempoRecuperacao"
  ]
} 


###############################################################################
### FILE: schemas/recuperacaoPosAnestesica.uiSchema.json
###############################################################################
{
  "tempoRecuperacao": {
    "ui:widget": "RadioButtonGroupField",
    "ui:options": {
      "required": true
    }
  },
  "nivelDessaturacaoPos": {
    "ui:widget": "RadioButtonGroupField"
  },
  "outrasQueixasPos": {
    "ui:widget": "CheckboxGroupField"
  }
} 


###############################################################################
### FILE: stores/authStore.ts
###############################################################################
import { create } from 'zustand';
import useProjectStore from './projectStore'; // Import project store to access project details

// Define the types for the store's state and actions
interface User {
  id: string;
  name: string;
  email: string;
  // Add other relevant user properties as needed
}

// Roles can be project-specific, so we might store them per project
// For now, a simple array for the active project context
interface AuthState {
  isAuthenticated: boolean;
  user: User | null;
  jwtToken: string | null;
  activeProjectRoles: string[]; // e.g., ['ProjectLead', 'Researcher'] for the current project
  isLoading: boolean;
  error: string | null;
}

interface AuthActions {
  login: (userData: User, token: string) => void;
  logout: () => void;
  setProjectRoles: (roles: string[]) => void; // To update roles when project context changes
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  internal_setUserForMock: (user: User) => void;
}

// Create the store
const useAuthStore = create<AuthState & AuthActions>((set, get) => ({
  // Initial state
  isAuthenticated: false,
  user: null,
  jwtToken: null,
  activeProjectRoles: [],
  isLoading: false,
  error: null,

  // Actions
  login: (userData, token) => {
    set({
      isAuthenticated: true,
      user: userData,
      jwtToken: token,
      isLoading: false,
      error: null,
      activeProjectRoles: [], // Reset roles, will be set by project context
    });
  },
  logout: () => {
    set({
      isAuthenticated: false,
      user: null,
      jwtToken: null,
      activeProjectRoles: [],
      isLoading: false,
      error: null,
    });
    // Also clear active project from project store on logout
    useProjectStore.getState().clearActiveProject(); 
  },
  setProjectRoles: (roles) => set({ activeProjectRoles: roles }),
  setLoading: (loading) => set({ isLoading: loading }),
  setError: (error) => set({ error: error, isLoading: false }),
  internal_setUserForMock: (user: User) => set({ user, isAuthenticated: true }),
}));

// Mock login action for demonstration - in a real app, this would involve API calls
export const mockLogin = (userIdToLogin: string) => {
  // Simulate fetching user details and a token
  const mockUser: User = {
    id: userIdToLogin, // Use the provided userId
    name: userIdToLogin === 'userLead123' ? 'Dr. User Lead' : 'Mock User',
    email: userIdToLogin === 'userLead123' ? 'dr.lead@example.com' : 'mock.user@example.com',
  };
  const mockToken = 'mock-jwt-token-' + Date.now();

  // useAuthStore.getState().login(mockUser, mockToken, initialProjectRoles);
  // Instead of passing roles directly, login sets the user, and Layout will derive roles.
  useAuthStore.getState().login(mockUser, mockToken);
  console.log(`Mock login for ${userIdToLogin}. Active project roles will be set based on project selection.`);
};

export const mockLogout = () => {
  useAuthStore.getState().logout();
  console.log('Mock logout executed.');
};

export default useAuthStore; 


###############################################################################
### FILE: stores/projectStore.ts
###############################################################################
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';

// Define the types for projects
export interface ProjectMember {
  userId: string;
  roles: string[];
}

export interface Project {
  id: string;
  name: string;
  description?: string;
  members: ProjectMember[]; // Added members array
  goals?: string; // Add optional goals field
  // Add other project-specific details, e.g., form definitions, roles, etc.
  // For now, keeping it simple
}

// Mock data - replace with actual API calls later
const mockProjects: Project[] = [
  {
      id: 'proj_crest_001',
  name: 'CREST - Estudo Piloto Alagoas',
    description: 'Coleta de dados para o projeto Respirar em cirurgias pediátricas de via aérea no estado de Alagoas.',
    goals: 'Desenvolver um protocolo ERAS específico para cirurgia de via aérea pediátrica no estado de Alagoas, visando reduzir complicações e tempo de internação.',
    members: [
      { userId: 'userLead123', roles: ['ProjectLead', 'Researcher', 'FormDesigner'] },
      { userId: 'user456', roles: ['DataEntry'] },
      { userId: 'user789', roles: ['Researcher'] },
    ],
  },
  {
    id: 'proj_eras_002',
    name: 'ERAS Pediátrico - Hospital Central',
    description: 'Implementação e avaliação de protocolos ERAS em cirurgia torácica pediátrica no Hospital Central.',
    goals: 'Avaliar a eficácia do protocolo ERAS em reduzir o tempo de recuperação e complicações em pacientes pediátricos submetidos a cirurgia torácica.',
    members: [
      { userId: 'userLead123', roles: ['Researcher'] },
      { userId: 'anotherLeadUser', roles: ['ProjectLead'] },
      { userId: 'user456', roles: ['DataEntry', 'Clinician'] },
    ],
  },
  {
    id: 'proj_followup_003',
    name: 'Estudo de Coorte - Follow-up 30 Dias',
    description: 'Acompanhamento de pacientes 30 dias após alta para avaliação de desfechos tardios.',
    members: [
      { userId: 'userLead123', roles: ['ProjectLead', 'Coordinator'] },
      { userId: 'user789', roles: ['Researcher'] },
    ],
  },
  {
    id: 'proj_locked_004',
    name: 'Projeto Confidencial X',
    description: 'Um projeto ao qual o userLead123 não tem acesso direto.',
    members: [
      { userId: 'anotherLeadUser', roles: ['ProjectLead'] },
      { userId: 'user456', roles: ['Researcher'] },
    ],
  }
];

interface ProjectState {
  availableProjects: Project[];
  activeProjectId: string | null;
  activeProjectDetails: Project | null;
  isLoading: boolean;
  error: string | null;
}

interface ProjectActions {
  fetchAvailableProjects: () => Promise<void>;
  setActiveProject: (projectId: string) => void;
  clearActiveProject: () => void;
  addProject: (newProject: Project) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
}

// Create the store
const useProjectStore = create<ProjectState & ProjectActions>()(
  persist(
    (set, get) => ({
      // Initial state
      availableProjects: [],
      activeProjectId: null,
      activeProjectDetails: null,
      isLoading: false,
      error: null,

      // Actions
      fetchAvailableProjects: async () => {
        set({ isLoading: true, error: null });
        try {
          // Simulate API call
          await new Promise(resolve => setTimeout(resolve, 500)); 
          // Filter projects to only show those the hardcoded 'userLead123' is part of for now
          // This is a temporary measure for the mock. In reality, backend would filter.
          // const userProjects = mockProjects.filter(p => p.members.some(m => m.userId === 'userLead123'));
          // For now, let's return all projects, roles will gate access.
          set({ availableProjects: mockProjects, isLoading: false });
        } catch (err) {
          const errorMessage = err instanceof Error ? err.message : 'Failed to fetch projects';
          set({ error: errorMessage, isLoading: false });
          console.error("Error fetching projects:", errorMessage);
        }
      },
      setActiveProject: (projectId) => {
        const project = get().availableProjects.find(p => p.id === projectId);
        if (project) {
          set({ activeProjectId: projectId, activeProjectDetails: project, error: null });
          console.log(`Active project set to: ${project.name}`);
        } else {
          set({ error: `Project with ID ${projectId} not found.`, activeProjectId: null, activeProjectDetails: null });
          console.warn(`Attempted to set active project to non-existent ID: ${projectId}`);
        }
      },
      clearActiveProject: () => {
        set({ activeProjectId: null, activeProjectDetails: null });
        console.log('Active project cleared.');
      },
      addProject: (newProject) => {
        set(state => ({
          availableProjects: [...state.availableProjects, newProject]
        }));
        console.log('New project added:', newProject);
      },
      setLoading: (loading) => set({ isLoading: loading }),
      setError: (error) => set({ error: error, isLoading: false }),
    }),
    {
      name: 'crest-project-storage', 
      storage: createJSONStorage(() => localStorage), 
      partialize: (state) => ({ activeProjectId: state.activeProjectId }), // Only persist activeProjectId
    }
  )
);

export default useProjectStore; 


###############################################################################
### FILE: stores/submissionStore.ts
###############################################################################
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';

// --- Interfaces (should match those in DataSubmissionPage.tsx or be imported) ---
export interface PatientInputData {
  initials: string;
  gender: string;
  dob: string; // YYYY-MM-DD
  projectConsent: boolean;
  recontactConsent: boolean;
}

export interface FormDefinition {
  key: string; 
  name: string;
  version: string;
  schemaPath: string;
  uiSchemaPath: string;
}

interface SubmissionState {
  // State of an active or paused submission encounter
  isEncounterActive: boolean;
  patientData: PatientInputData | null;
  formSequence: FormDefinition[];
  currentFormIndex: number; // Index in the formSequence
  allFormsData: { [formKey: string]: any }; // Data for all forms in the sequence, keyed by formDef.key
  lastUpdateTimestamp: number | null;
}

interface SubmissionActions {
  startNewEncounter: (patientData: PatientInputData, sequence: FormDefinition[]) => void;
  savePartialFormProgress: (formKey: string, data: any) => void;
  setCurrentFormIndex: (index: number) => void;
  updatePatientData: (patientData: Partial<PatientInputData>) => void;
  completeAndClearEncounter: () => void; // Called after successful backend submission
  resumeEncounter: (encounterState: SubmissionState) => void; // To load a paused encounter
  // Could add actions for updating a specific form's data, etc.
}

const initialPatientData: PatientInputData = {
  initials: '',
  gender: '',
  dob: '',
  projectConsent: false,
  recontactConsent: false,
};

const initialSubmissionState: SubmissionState = {
  isEncounterActive: false,
  patientData: null, 
  formSequence: [],
  currentFormIndex: 0,
  allFormsData: {},
  lastUpdateTimestamp: null,
};

// Create the store with persistence middleware
const useSubmissionStore = create<SubmissionState & SubmissionActions>()(
  persist(
    (set, get) => ({
      ...initialSubmissionState,

      startNewEncounter: (patientData, sequence) => {
        set({
          isEncounterActive: true,
          patientData: { ...patientData }, 
          formSequence: [...sequence],
          currentFormIndex: 0,
          allFormsData: {}, // Reset data for new encounter
          lastUpdateTimestamp: Date.now(),
        });
        console.log('New submission encounter started:', get());
      },

      savePartialFormProgress: (formKey, data) => {
        set(state => ({
          allFormsData: {
            ...state.allFormsData,
            [formKey]: data,
          },
          lastUpdateTimestamp: Date.now(),
        }));
        console.log('Form progress saved:', formKey, data, get().allFormsData);
      },

      setCurrentFormIndex: (index) => {
        if (index >= 0 && index < get().formSequence.length) {
          set({ currentFormIndex: index, lastUpdateTimestamp: Date.now() });
        } else {
          console.warn('Attempted to set invalid form index:', index);
        }
      },
      
      updatePatientData: (updatedPatientData) => {
        set(state => ({
            patientData: state.patientData ? { ...state.patientData, ...updatedPatientData } : null,
            lastUpdateTimestamp: Date.now(),
        }));
      },

      completeAndClearEncounter: () => {
        set({ ...initialSubmissionState }); // Reset to initial empty state
        console.log('Submission encounter completed and cleared.');
      },
      
      resumeEncounter: (encounterState) => {
        set({ ...encounterState, isEncounterActive: true }); // Ensure it's marked active
        console.log('Submission encounter resumed:', encounterState);
      },
    }),
    {
      name: 'crest-submission-storage', // name of the item in storage (must be unique)
      storage: createJSONStorage(() => localStorage), // (optional) by default, 'localStorage' is used
      partialize: (state) => ({
        // Persist only these parts of the state to avoid storing functions or very large non-serializable objects
        isEncounterActive: state.isEncounterActive,
        patientData: state.patientData,
        formSequence: state.formSequence,
        currentFormIndex: state.currentFormIndex,
        allFormsData: state.allFormsData,
        lastUpdateTimestamp: state.lastUpdateTimestamp,
      }),
    }
  )
);

export const clearPersistedSubmission = () => {
    useSubmissionStore.persist.clearStorage(); // Clears from localStorage
    // Reset the in-memory state to initial values. 
    // Actions are part of the store definition and remain.
    useSubmissionStore.setState(initialSubmissionState);
    console.log('Persisted submission data cleared and store reset to initial values.');
}

export default useSubmissionStore; 


###############################################################################
### FILE: vite-env.d.ts
###############################################################################
/// <reference types="vite/client" />



